<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1"><title>Snowpeak Blog</title><meta name="description" content="Sharing and discussing cutting-edge technologies of AI and cloud computing, and other interesting topics."><meta name="keywords" content="AI, GitHub Copilot, Azure Cloud, Cloud Computing, Front-end Technology, Back-end Technology, Web Development, Software Engineering"><link rel="stylesheet" href="/assets/css/style.min.css"><link rel="stylesheet" href="https://site-assets.fontawesome.com/releases/v6.7.2/css/all.css"><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/default.min.css"><script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/highlight.min.js"></script></head><body><nav class="navbar"><div class="nav-container"><div class="nav-logo"><h2><i class="fas fa-snowflake"></i> Snowpeak</h2></div><div class="nav-menu"><a href="/en/" class="nav-link">Home</a><a href="/en/page_1.htm" class="nav-link">Article</a><a href="/en#tools" class="nav-link">Tools</a><a href="/en/about.htm" class="nav-link">About</a><a href="/" class="nav-link lang-switch"><i class="fas fa-globe"></i> 简体中文</a></div><div class="nav-toggle" id="mobile-menu"><span class="bar"></span><span class="bar"></span><span class="bar"></span></div></div></nav><header class="article-header"><div class="container"><h1>Ajax Chinese Encoding Solution</h1><div class="article-meta"><span><i class="fas fa-calendar"></i> Published: 2010-06-03 12:44:00</span><span><i class="fas fa-clock"></i> Reading time: 22 minutes </span><span><i class="fas fa-tag"></i> Category: Frontend</span></div></div></header><main class="article-container"><h1>Ajax Chinese Encoding Solution</h1><p>Published: <em>2010-06-03 12:44:00</em></p><p>Category: <strong>Frontend</strong></p><p>Summary: In mainstream browsers, Ajax objects send data encoded in UTF-8. Therefore, when both frontend and backend files are uniformly encoded in UTF-8, the situation is classic and straightforward. If GB character set is indeed required, appropriate workarounds are needed. This article explains solutions for both character sets.</p><h2>Introduction</h2><p>In mainstream browsers, Ajax objects send request data encoded in UTF-8. Therefore, when both frontend and backend files are uniformly encoded in UTF-8, the situation is classic and straightforward. If GB character set is indeed required, appropriate workarounds are needed. This article explains solutions for both character sets. Server-side files are exemplified using PHP.</p><p>The following solutions have been tested in IE series, Firefox 3, Chrome 4, and Opera 10.</p><h2>UTF-8 Classic Solution</h2><p>Both frontend and backend files should be uniformly encoded in UTF-8.</p><p>HTML file declaration:</p> <pre><code class="language-html">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
</code></pre> <p>JavaScript files should also be saved in UTF-8 mode. The core to ensure that parameters are always transmitted in UTF-8 encoding is to process parameter values uniformly with encodeURIComponent(). That is, the following line in SF.HTTP.xhr_utf.js:</p> <pre><code class="language-javascript">param = encodeURIComponent(param);
</code></pre> <p>Note that at this point, the request data received by the backend PHP program is UTF-8 encoded. If you need to convert it to data in another character set, you can further process it with iconv. The PHP program's output data must also be UTF-8 encoded, with the declaration:</p> <pre><code class="language-php">header(&quot;text/html;charset=UTF-8&quot;); 
</code></pre> <p>Note that to ensure IE properly receives UTF-8 data, you must write "UTF-8" in uppercase, not lowercase or other forms!</p><p>Here is the complete code for each file:</p><h3>sfxhr_utf.htm</h3> <pre><code class="language-html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;AJAX Chinese - UTF-8 Version&lt;/title&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;SF.HTTP.xhr_utf.js&quot; mce_src=&quot;SF.HTTP.xhr_utf.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre> <h3>SF.HTTP.xhr_utf.js</h3> <pre><code class="language-javascript">var SF = {
  //HTTP Request Related
  HTTP: {
    /**
     * Ajax call method compatible with GB2312 character set
     * The workaround uses escape, where submitted Chinese characters become %u9886%u5730, etc.
     * Backend programs then process them into GB character set Chinese, see the unescape function in ajax.php.
     * Input parameters, JSON format object
     * {
     *   'url': url, Request URL
     *   'type': method, Submission method, get or post, default is get
     *   'charset':charset, Character set, default utf-8
     *   'params': Submitted parameters, JSON format, e.g. {var1:'北京', var2:'test'}
     *   'success': Handler function when response is successful, parameter is standard XMLHttpRequest object
     *   'fail': Handler function when request fails, usually to give prompt on page, can be empty
     *   'loading': Loading function during response wait, usually to give prompt on page, can be empty
     * }
     */
    xhr:function(json) {
      //Get input parameters and assign default values
      var url=json.url, 
          method=json.type || 'get', 
          params=json.params || {}, 
          onComplete=json.success, 
          charset=json.charset || 'utf8', 
          onFailure=json.fail, 
          loading=json.loading;

      var getHTTPObject = function() {
        var xmlhttp = false;
        if (window.XMLHttpRequest) {
          xmlhttp = new XMLHttpRequest();
        } else if(window.ActiveXObject) {
          try {
            xmlhttp = new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;);
          } catch (e) {
            try {
              xmlhttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);
            } catch (e) {
              xmlhttp = false;
            }
          }
        }
        return xmlhttp;
      };

      if (loading) {
        loading();
      }

      var query = '';
      for (var i in params) {
        var param = params[i];
        if ('gb2312'==charset) {
          param = escape(param);
        } 
        //Final solution for IE GET method parameter value transmission issue, 
        //when using UTF-8 character set, uniformly add encodeURIComponent
        else {
          param = encodeURIComponent(param);
        }
        query+= i + '='+ param + '&amp;';
      }

      var XHR = getHTTPObject();
      //XHR.setRequestHeader(&quot;charset&quot;,&quot;gb2312&quot;);
      XHR.onreadystatechange = function() {
        if (XHR.readyState == 4) {
          if (XHR.status == 200 || XHR.status == 304) {
            if (onComplete) {
              onComplete(XHR);
            }
          } else {
            if (onFailure) {
              onFailure(XHR)
            };
          }
        }
      };

      method = ('get' == method.toLowerCase()) ? 'get':'post';
      if ('post'==method) {
        XHR.open(method, url, true);
        XHR.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);
        XHR.send(query);
      } else {
        url += '?'+ query + 'random='+Math.random();
        XHR.open(method, url, true);
        XHR.send(null);
      }
    }
  }
};
</code></pre> <h3>ajax_utf.php</h3> <pre><code class="language-php">&lt;?php 
$test = isset($_GET['test']) ? $_GET['test'] : $_POST['test'];
//To ensure IE properly receives UTF-8 data, you must use &quot;UTF-8&quot; in uppercase, not lowercase!
header(&quot;text/plain;charset=UTF-8&quot;);
echo ($test);
</code></pre> <h2>GB2312 Workaround Solution</h2><p>Both frontend and backend files should be uniformly encoded in ANSI.</p><p>HTML file declaration:</p> <pre><code class="language-html">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gb2312&quot; /&gt;
</code></pre> <p>To prevent Ajax objects from sending data in the default UTF-8 encoding, the core workaround is to process parameter values uniformly with escape(). Chinese characters will become Unicode format like %u5317%u4EAC, so browsers will treat them as Western data, no longer URI encoding them with UTF-8 character set as with regular Chinese characters. That is, the following line in SF.HTTP.xhr_utf.js:</p> <pre><code class="language-javascript">param = escape(param);
</code></pre> <p>Note that at this point, the request data received by the backend PHP program is unencoded Unicode format, which needs to be converted back to GB2312 character set data using the unescape() function in the PHP program. The output data must also be GB2312 encoded, with the declaration before output:</p> <pre><code class="language-php">header(&quot;Content-type: text/html; charset=gb2312&quot;);
</code></pre> <p>For usage instructions of the <code>SF.HTTP.xhr()</code> method, see the method comments and HTML examples.</p><p>In example packages for different character sets, SF.HTTP.xhr.js and SF.HTTP.xhr_utf.js have exactly the same content, except that SF.HTTP.xhr_utf.js is UTF-8 encoded. It is recommended to use the UTF-8 version with all files uniformly encoded in UTF-8, because IE browsers require referenced external files to also be UTF-8 encoded.</p><p>Here is the complete code for each file:</p><h3>sfxhr.htm</h3> <pre><code class="language-html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gb2312&quot; /&gt;
&lt;title&gt;AJAX Chinese - GB2312 Version&lt;/title&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;SF.HTTP.xhr.js&quot; mce_src=&quot;SF.HTTP.xhr.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre> <h3>SF.HTTP.xhr.js</h3> <pre><code class="language-javascript">var SF = {
  //HTTP Request Related
  HTTP: {
    /**
     * Ajax call method compatible with GB2312 character set
     * The workaround uses escape, where submitted Chinese characters become %u9886%u5730, etc.
     * Backend programs then process them into GB character set Chinese, see the unescape function in ajax.php.
     * Input parameters, JSON format object
     * {
     *   'url': url, Request URL
     *   'type': method, Submission method, get or post, default is get
     *   'charset':charset, Character set, default utf-8
     *   'params': Submitted parameters, JSON format, e.g. {var1:'北京', var2:'test'}
     *   'success': Handler function when response is successful, parameter is standard XMLHttpRequest object
     *   'fail': Handler function when request fails, usually to give prompt on page, can be empty
     *   'loading': Loading function during response wait, usually to give prompt on page, can be empty
     * }
     */
    xhr:function(json) {
      //Get input parameters and assign default values
      var url=json.url, 
          method=json.type || 'get', 
          params=json.params || {}, 
          onComplete=json.success, 
          charset=json.charset || 'utf8', 
          onFailure=json.fail, 
          loading=json.loading;

      var getHTTPObject = function() {
        var xmlhttp = false;
        if (window.XMLHttpRequest) {
          xmlhttp = new XMLHttpRequest();
        } else if(window.ActiveXObject) {
          try {
            xmlhttp = new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;);
          } catch (e) {
            try {
              xmlhttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);
            } catch (e) {
              xmlhttp = false;
            }
          }
        }
        return xmlhttp;
      };

      if (loading) {
        loading();
      }

      var query = '';
      for (var i in params) {
        var param = params[i];
        if ('gb2312'==charset) {
          param = escape(param);
        } 
        //Final solution for IE GET method parameter value transmission issue, 
        //when using UTF-8 character set, uniformly add encodeURIComponent
        else {
          param = encodeURIComponent(param);
        }
        query+= i + '='+ param + '&amp;';
      }

      var XHR = getHTTPObject();
      //XHR.setRequestHeader(&quot;charset&quot;,&quot;gb2312&quot;);
      XHR.onreadystatechange = function() {
        if (XHR.readyState == 4) {
          if (XHR.status == 200 || XHR.status == 304) {
            if (onComplete) {
              onComplete(XHR);
            }
          } else {
            if (onFailure) {
              onFailure(XHR)
            };
          }
        }
      };

      method = ('get' == method.toLowerCase()) ? 'get':'post';
      if ('post'==method) {
        XHR.open(method, url, true);
        XHR.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);
        XHR.send(query);
      } else {
        url += '?'+ query + 'random='+Math.random();
        XHR.open(method, url, true);
        XHR.send(null);
      }
    }
  }
};
</code></pre> <h3>ajax.php</h3> <pre><code class="language-php">&lt;?php 
//If the input parameter is not a unicode format value, it will be returned as is.
function unescape($str) {
  $str = rawurldecode($str);
  preg_match_all(&quot;/(?:%u.{4})|&amp;#x.{4};|&amp;#\d+;|.+/U&quot;,$str,$r);
  $ar = $r[0];
  //print_r($ar);
  foreach($ar as $k=&gt;$v) {
    if(substr($v,0,2) == &quot;%u&quot;)
      $ar[$k] = iconv(&quot;UCS-2&quot;,&quot;GB2312&quot;,pack(&quot;H4&quot;,substr($v,-4)));
    elseif(substr($v,0,3) == &quot;&amp;#x&quot;)
      $ar[$k] = iconv(&quot;UCS-2&quot;,&quot;GB2312&quot;,pack(&quot;H4&quot;,substr($v,3,-1)));
    elseif(substr($v,0,2) == &quot;&amp;#&quot;) {
      echo substr($v,2,-1).&quot;&lt;br&gt;&quot;;
      $ar[$k] = iconv(&quot;UCS-2&quot;,&quot;GB2312&quot;,pack(&quot;n&quot;,substr($v,2,-1)));
    }
  }
  return join(&quot;&quot;,$ar);
}

$test = isset($_GET['test']) ? $_GET['test'] : $_POST['test'];
//To ensure output content is in the specified character set, explicitly declare it.
//When outputting GB2312 character set content,
header(&quot;Content-type: text/html; charset=gb2312&quot;);
echo unescape($test);
</code></pre> </main><footer class="footer"><div class="container"><div class="footer-content"><div class="footer-section"><h3><i class="fas fa-snowflake"></i> Snowpeak</h3><p>Sharing and discussing cutting-edge technologies of AI and cloud computing, and other interesting topics.</p><div class="social-links"><div class="social-platforms"><a href="https://github.com/xfsnow" target="_blank" class="social-link"><i class="fab fa-github"></i></a><a href="https://snowpeak.blog.csdn.net/" target="_blank" class="social-link"><i class="fas fa-blog"></i></a><a href="https://space.bilibili.com/701839928" target="_blank" class="social-link"><i class="fab fa-bilibili"></i></a><a href="https://www.linkedin.com/in/snowpeak" target="_blank" class="social-link"><i class="fab fa-linkedin"></i></a></div><div class="wechat-section"><div class="wechat-info"><span class="wechat-label">WeChat Account</span><span class="wechat-name">Tech Warm Life</span></div><img src="/assets/img/techwarm.jpg" alt="Tech Warm Life" class="wechat-qr"></div></div></div><div class="footer-section"><h4>Quick Links</h4><ul><li><a href="/#articles">Article</a></li><li><a href="/#tools">Tools</a></li><li><a href="https://docs.github.com/en/pages" target="_blank">GitHub Pages</a></li></ul></div><div class="footer-section"><h4>Tech Stack</h4><ul><li>Python</li><li>GitHub Copilot</li><li>Claude Sonnet 4</li><li>HTML/CSS/JS</li><li>Responsive Design</li></ul></div></div><div class="footer-bottom"><p>Copyright &copy; 2013-<script>document.write((new Date()).getFullYear());</script> Snowpeak Blog. Running on GitHub Pages. <a href="https://beian.miit.gov.cn" target="_blank" class="icp_beian">京ICP备2021007720号</a><a href="http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=11010502052523" target="_blank" class="gongan_beian">京公网安备11010502052523号</a></p></div></div></footer><script src="/en/index.js"></script><script src="/assets/js/blog.min.js"></script><script>hljs.highlightAll();</script></body></html>