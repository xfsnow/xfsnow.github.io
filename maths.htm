<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Snowpeak Tech Blog - AI与云计算技术分享</title>
    <meta name="description" content="专注于AI、云计算、GitHub Copilot等前沿技术的分享与探讨">
    <link rel="stylesheet" href="assets/css/style.css">
    <link rel="stylesheet" href="https://site-assets.fontawesome.com/releases/v6.7.2/css/all.css">
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <div class="nav-logo">
                <a href="index.html" style="text-decoration: none;"><h2><i class="fas fa-snowflake"></i> Snowpeak</h2></a>
            </div>
            <div class="nav-menu">
                <a href="index.html#home" class="nav-link">首页</a>
                <a href="index.html#articles" class="nav-link">文章</a>
                <a href="index.html#tools" class="nav-link">工具</a>
                <a href="index.html#about" class="nav-link">关于</a>
            </div>
            <div class="nav-toggle" id="mobile-menu">
                <span class="bar"></span>
                <span class="bar"></span>
                <span class="bar"></span>
            </div>
        </div>
    </nav>
    <header class="article-header">
        <div class="container">
            <h1>数学计算演练</h1>
            <div class="article-meta">
                <span><i class="fas fa-calendar"></i> 2024年1月15日</span>
                <span><i class="fas fa-clock"></i> 阅读时间 5分钟</span>
                <span><i class="fas fa-tag"></i> AI技术</span>
                <span><i class="fas fa-user"></i> Snowpeak</span>
            </div>
        </div>
    </header>
    <!-- 数学计算保留（隐藏） -->
    <div >
        <script>
            var maxPrimeNumber = function(n) {
                if (n < 2) return 0;
                var isPrime = new Array(n + 1).fill(true);
                isPrime[0] = isPrime[1] = false;
                for (var i = 2; i * i <= n; i++) {
                    if (isPrime[i]) {
                        for (var j = i * i; j <= n; j += i) {
                            isPrime[j] = false;
                        }
                    }
                }
                for (var k = n; k >= 2; k--) {
                    if (isPrime[k]) return k;
                }
                return -1;
            };
            document.write('100000以内最大质数是' + maxPrimeNumber(100000));
        </script>
    </div>
<div>
<h2>视频播放器</h2>
<div class="video-player-container" style="max-width: 800px; margin: 20px auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px;">
    <!-- 文件选择器 -->
    <div class="file-input-container" style="margin-bottom: 20px; text-align: center;">
        <label for="videoFileInput" style="display: inline-block; padding: 10px 20px; background-color: #007bff; color: white; border-radius: 5px; cursor: pointer; transition: background-color 0.3s;">
            <i class="fas fa-upload"></i> 选择视频文件
        </label>
        <input type="file" id="videoFileInput" accept="video/*" style="display: none;">
        <div id="fileName" style="margin-top: 10px; color: #666; font-size: 14px;"></div>
    </div>
    
    <!-- 视频播放器 -->
    <div class="video-wrapper" style="position: relative; width: 100%; max-width: 100%; background: #000; border-radius: 5px; overflow: hidden;">
        <video id="videoPlayer" controls style="width: 100%; height: auto; display: none;">
            您的浏览器不支持 HTML5 视频播放。
        </video>
        <div id="videoPlaceholder" style="width: 100%; height: 300px; background: linear-gradient(45deg, #f0f0f0 25%, transparent 25%), linear-gradient(-45deg, #f0f0f0 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #f0f0f0 75%), linear-gradient(-45deg, transparent 75%, #f0f0f0 75%); background-size: 20px 20px; background-position: 0 0, 0 10px, 10px -10px, -10px 0px; display: flex; align-items: center; justify-content: center; color: #999; font-size: 18px; border-radius: 5px;">
            <div style="text-align: center;">
                <i class="fas fa-play-circle" style="font-size: 48px; margin-bottom: 10px; display: block;"></i>
                请选择视频文件开始播放
            </div>
        </div>
    </div>
    
    <!-- 播放控制信息 -->
    <div id="videoInfo" style="margin-top: 15px; padding: 10px; background-color: #f8f9fa; border-radius: 5px; display: none;">
        <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 10px;">
            <div>
                <strong>文件名:</strong> <span id="videoFileName">-</span><br>
                <strong>时长:</strong> <span id="videoDuration">-</span>
            </div>
            <div>
                <strong>分辨率:</strong> <span id="videoResolution">-</span><br>
                <strong>文件大小:</strong> <span id="videoFileSize">-</span>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const fileInput = document.getElementById('videoFileInput');
    const videoPlayer = document.getElementById('videoPlayer');
    const videoPlaceholder = document.getElementById('videoPlaceholder');
    const fileName = document.getElementById('fileName');
    const videoInfo = document.getElementById('videoInfo');
    const videoFileName = document.getElementById('videoFileName');
    const videoDuration = document.getElementById('videoDuration');
    const videoResolution = document.getElementById('videoResolution');
    const videoFileSize = document.getElementById('videoFileSize');

    let currentBlobURL = null;

    fileInput.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            // 检查是否为视频文件
            if (!file.type.startsWith('video/')) {
                alert('请选择有效的视频文件！');
                return;
            }

            // 清理之前的 blob URL
            if (currentBlobURL) {
                URL.revokeObjectURL(currentBlobURL);
                currentBlobURL = null;
            }

            // 显示文件名
            fileName.textContent = `已选择: ${file.name}`;
            
            try {
                // 创建视频URL
                currentBlobURL = URL.createObjectURL(file);
                
                // 重置视频播放器
                videoPlayer.load();
                videoPlayer.src = currentBlobURL;
                
                // 显示视频播放器，隐藏占位符
                videoPlaceholder.style.display = 'none';
                videoPlayer.style.display = 'block';
                videoInfo.style.display = 'block';
                
                // 更新文件信息
                videoFileName.textContent = file.name;
                videoFileSize.textContent = formatFileSize(file.size);
                
                console.log('Video blob URL created:', currentBlobURL);
                
            } catch (error) {
                console.error('Error creating blob URL:', error);
                alert('创建视频URL时出错，请尝试其他视频文件。');
                return;
            }
        }
    });

    // 监听视频元数据加载（移到外部，避免重复绑定）
    videoPlayer.addEventListener('loadedmetadata', function() {
        videoDuration.textContent = formatTime(videoPlayer.duration);
        videoResolution.textContent = `${videoPlayer.videoWidth} × ${videoPlayer.videoHeight}`;
    });

    // 监听视频加载错误
    videoPlayer.addEventListener('error', function(e) {
        console.error('Video loading error:', e);
        const error = videoPlayer.error;
        let errorMessage = '视频加载失败';
        
        if (error) {
            switch (error.code) {
                case error.MEDIA_ERR_ABORTED:
                    errorMessage = '视频加载被中断';
                    break;
                case error.MEDIA_ERR_NETWORK:
                    errorMessage = '网络错误导致视频加载失败';
                    break;
                case error.MEDIA_ERR_DECODE:
                    errorMessage = '视频解码失败，可能是格式不支持';
                    break;
                case error.MEDIA_ERR_SRC_NOT_SUPPORTED:
                    errorMessage = '不支持的视频格式';
                    break;
            }
        }
        
        alert(errorMessage + '。请尝试其他视频文件或格式。');
        
        // 重置到初始状态
        videoPlaceholder.style.display = 'flex';
        videoPlayer.style.display = 'none';
        videoInfo.style.display = 'none';
        fileName.textContent = '';
    });

    // 监听视频加载成功
    videoPlayer.addEventListener('loadstart', function() {
        console.log('Video loading started');
    });

    videoPlayer.addEventListener('canplay', function() {
        console.log('Video can start playing');
    });

    // 格式化文件大小
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // 格式化时间
    function formatTime(seconds) {
        if (isNaN(seconds)) return '00:00';
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = Math.floor(seconds % 60);
        return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
    }

    // 拖拽上传功能
    const container = document.querySelector('.video-player-container');
    
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        container.addEventListener(eventName, preventDefaults, false);
    });
    
    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    
    ['dragenter', 'dragover'].forEach(eventName => {
        container.addEventListener(eventName, highlight, false);
    });
    
    ['dragleave', 'drop'].forEach(eventName => {
        container.addEventListener(eventName, unhighlight, false);
    });
    
    function highlight() {
        container.style.backgroundColor = '#e3f2fd';
        container.style.borderColor = '#2196f3';
    }
    
    function unhighlight() {
        container.style.backgroundColor = '';
        container.style.borderColor = '#ddd';
    }
    
    container.addEventListener('drop', handleDrop, false);
    
    function handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;
        
        if (files.length > 0) {
            fileInput.files = files;
            const event = new Event('change', { bubbles: true });
            fileInput.dispatchEvent(event);
        }
    }

    // 页面卸载时清理 blob URL
    window.addEventListener('beforeunload', function() {
        if (currentBlobURL) {
            URL.revokeObjectURL(currentBlobURL);
        }
    });
});
</script>

</div>    
</body>
</html>