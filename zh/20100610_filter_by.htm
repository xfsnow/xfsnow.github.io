<!DOCTYPE html><html lang="zh-CN"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1"><title>雪峰-博客</title><meta name="description" content="专注于AI、云计算、GitHub Copilot等前沿技术的分享与探讨"><meta name="keywords" content="AI, GitHub Copilot, Azure云, 云计算, 前端技术, 后端技术, Web开发, 软件工程"><link rel="stylesheet" href="/assets/css/style.css"><link rel="stylesheet" href="https://site-assets.fontawesome.com/releases/v6.7.2/css/all.css"><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/default.min.css"><script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/highlight.min.js"></script></head><body><nav class="navbar"><div class="nav-container"><div class="nav-logo"><h2><i class="fas fa-snowflake"></i> Snowpeak</h2></div><div class="nav-menu"><a href="/" class="nav-link">首页</a><a href="/#articles" class="nav-link">文章</a><a href="/#tools" class="nav-link">演示</a><a href="/zh/about.htm" class="nav-link">关于</a><a href="/en/index.html" class="nav-link lang-switch"><i class="fas fa-globe"></i> English</a></div><div class="nav-toggle" id="mobile-menu"><span class="bar"></span><span class="bar"></span><span class="bar"></span></div></div></nav><header class="article-header"><div class="container"><h1>用位操作实现按子集筛选</h1><div class="article-meta"><span><i class="fas fa-calendar"></i> 发表: 2010-06-10 18:09:00</span><span><i class="fas fa-clock"></i> 阅读约需: 4分钟</span><span><i class="fas fa-tag"></i> 分类: 数据库</span></div></div></header><main class="article-container"><h2><a href="/cn/article/detail/filter_by_subset_with_bit_operation/">用位操作实现按子集筛选</a></h2><p>分类: <a href="/cn/article/category/database/">数据库</a> 2010-06-10 18:09:00 阅读(2532)</p><p>最近做用户权限控制，遇到一个需求，可以抽象为用户的城市属性都是多城市的，需要列出某城市集合的子集的用户。</p><p>最初的用户-城市关系表有如下范例数据，前一列为用户ID，后一列是城市</p><p>1 anshan 1 beijing 1 baotou 1 baoding 1 beihai 1 baoji 1 chongqing 1 chengdu 2 anshan 2 beijing 3 baotou 3 baoding 3 beihai 4 baoji 4 shanghai</p><p>比如一个城市集合是 [anshan, beijing, baotou, baoding, beihai, baoji]，筛选出城市属性是此集合子集的用户，就是要城市属性是 anshan 或 beijing 之类的，但没有此集合以外城市的用户。比如用户 2 的城市是anshan 和 beijing，用户 3 的城市是 baotou, baoding, beihai，都符合条件。用户 4 虽然有 baoji，但还有 shanghai，是指定集合以外的城市，所以不符合。</p><p>经过试验可以使用位操作，先把城市分离出单独的表，城市 ID 先用二进制数表示，每个城市把不同的位置为 1 ，即城市 ID 是 2 的幂</p><p>000000001 anshan 000000010 beijing 000000100 baotou 000001000 baoding 000010000 beihai 000100000 baoji 001000000 chongqing 010000000 chengdu 100000000 shanghai</p><p>然后用户-城市关系改为某用户所有城市的城市ID之和</p><p>ID 二进制</p><p>1 000111111 2 000000011 3 000011100 4 100100000 5 110000001</p><p>这里集合 [anshan, beijing, baotou, baoding, beihai, baoji] 就可以表示成 111111，筛选时取当前用户按位与的结果与前用户值相同的为符合。</p><p>上述演示数据中的整数都是二进制表示，实际存储在数据库里的是它们的十进制数，以下为筛选出城市集合为 111111 的具体 SQL 语句范例，这里 111111 已转换成普通十进制数 63：</p> <pre><code>select user_id, city_sum from user_city where (city_sum &amp; 63)=city_sum;
</code></pre> <p>此方案城市 ID 是2的幂， 要求字段长度比较大，MySQL 无符号 BIGINT 最大是18446744073709551615。所以 城市ID 和用户的城市属性都用无符号 BIGINT。</p><p>最后列出此例子可用的实际 SQL 语句，这是 MySQL 数据库的，其它数据库可依理类推：</p> <pre><code>CREATE TABLE `city` (
  `city_id` bigint(20) unsigned NOT NULL default '0',
  `city_name` varchar(20) NOT NULL,
  PRIMARY KEY  (`city_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='城市,城市ID是按位递增的二进制数';

INSERT INTO `city` VALUES (1, 'anshan');
INSERT INTO `city` VALUES (2, 'beijing');
INSERT INTO `city` VALUES (4, 'baotou');
INSERT INTO `city` VALUES (8, 'baoding');
INSERT INTO `city` VALUES (16, 'beihai');
INSERT INTO `city` VALUES (32, 'baoji');
INSERT INTO `city` VALUES (64, 'chongqing');
INSERT INTO `city` VALUES (128, 'chengdu');
INSERT INTO `city` VALUES (256, 'shanghai');

CREATE TABLE `user_city` (
  `user_id` int(11) NOT NULL,
  `city_sum` bigint(20) unsigned default '0',
  PRIMARY KEY  (`user_id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1 COMMENT='用户-城市关系';

INSERT INTO `user_city` VALUES (1, 63);
INSERT INTO `user_city` VALUES (2, 3);
INSERT INTO `user_city` VALUES (3, 28);
INSERT INTO `user_city` VALUES (4, 288);
INSERT INTO `user_city` VALUES (5, 385);
</code></pre> <hr><p><em>原文链接: https://www.snowpeak.fun/cn/article/detail/filter_by_subset_with_bit_operation/</em></p></main><footer class="footer"><div class="container"><div class="footer-content"><div class="footer-section"><h3><i class="fas fa-snowflake"></i> Snowpeak</h3><p>专注于AI与云计算技术的分享平台</p><div class="social-links"><div class="social-platforms"><a href="https://github.com/xfsnow" target="_blank" class="social-link"><i class="fab fa-github"></i></a><a href="https://snowpeak.blog.csdn.net/" target="_blank" class="social-link"><i class="fas fa-blog"></i></a><a href="https://space.bilibili.com/701839928" target="_blank" class="social-link"><i class="fab fa-bilibili"></i></a><a href="https://www.linkedin.com/in/snowpeak" target="_blank" class="social-link"><i class="fab fa-linkedin"></i></a></div><div class="wechat-section"><div class="wechat-info"><span class="wechat-label">微信公众号</span><span class="wechat-name">技术温暖生活</span></div><img src="/assets/img/techwarm.jpg" alt="微信公众号二维码" class="wechat-qr"></div></div></div><div class="footer-section"><h4>快速链接</h4><ul><li><a href="#articles">最新文章</a></li><li><a href="#tools">范例演示</a></li><li><a href="https://docs.github.com/en/pages" target="_blank">GitHub Pages</a></li></ul></div><div class="footer-section"><h4>技术栈</h4><ul><li>Python</li><li>GitHub Copilot</li><li>Claude Sonnet 4</li><li>HTML/CSS/JS</li><li>响应式设计</li></ul></div></div><div class="footer-bottom"><p>Copyright &copy; 2013-<script>document.write((new Date()).getFullYear());</script> 雪峰博客。运行在 GitHub Pages 上。</p></div></div></footer><script src="/zh/index.js"></script><script src="/assets/js/blog.js"></script><script>hljs.highlightAll();</script></body></html>