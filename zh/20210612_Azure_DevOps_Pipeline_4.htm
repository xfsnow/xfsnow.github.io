<!DOCTYPE html><html lang="zh"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1"><title>雪峰博客</title><meta name="description" content="分享AI和云计算技术的最新动态与实践经验，以及其它有趣的话题。"><meta name="keywords" content="AI, GitHub Copilot, Azure云, 云计算, 前端技术, 后端技术, Web开发, 软件工程"><link rel="stylesheet" href="/assets/css/style.css"><link rel="stylesheet" href="https://site-assets.fontawesome.com/releases/v6.7.2/css/all.css"><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/default.min.css"><script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/highlight.min.js"></script></head><body><nav class="navbar"><div class="nav-container"><div class="nav-logo"><h2><i class="fas fa-snowflake"></i> Snowpeak</h2></div><div class="nav-menu"><a href="/" class="nav-link">首页</a><a href="/zh/page_1.htm" class="nav-link">文章</a><a href="/#tools" class="nav-link">工具</a><a href="/zh/about.htm" class="nav-link">关于</a><a href="/en/" class="nav-link lang-switch"><i class="fas fa-globe"></i> English</a></div><div class="nav-toggle" id="mobile-menu"><span class="bar"></span><span class="bar"></span><span class="bar"></span></div></div></nav><header class="article-header"><div class="container"><h1>Azure DevOps流水线合并多个源码库（四）</h1><div class="article-meta"><span><i class="fas fa-calendar"></i> 发布时间: 2021-06-12 10:00:00</span><span><i class="fas fa-clock"></i> 阅读约需: 5 分钟 </span><span><i class="fas fa-tag"></i> 分类: 工具</span></div></div></header><main class="article-container"><h2>构建前端项目</h2><p>回到YAML文件编辑界面，在</p> <pre><code class="language-yaml">steps:
- checkout: Angular
  displayName: 'checkout Angular'
</code></pre> <p>步骤下面加上如下2个任务。</p> <pre><code class="language-yaml">- task: Npm@1
  displayName: 'npm install'
  inputs:
    command: install
    workingDir: '$(Agent.BuildDirectory)/s/ASP_Angular/'
- task: Npm@1
  displayName: 'Build Angular'
  inputs:
    command: custom
    customCommand: run build
    workingDir: '$(Agent.BuildDirectory)/s/ASP_Angular/'
</code></pre> <p>新增的前1个任务，是按前端项目的依赖关系，把依赖库安装上。后1个任务就是构建出前端可发布的文件。</p><p>注意这2个任务都有<code>workingDir: '$(Agent.BuildDirectory)/s/ASP_Angular/'</code> 这个声明，<code>$(Agent.BuildDirectory)</code>是个环境变量，在当前任务的环境下指的就是 <code>/home/vsts/work/1</code>，所以前面日志中显示的代码签出路径<code>/home/vsts/work/1/s/ASP_Angular</code>可以用环境变量来表示就是<code>$(Agent.BuildDirectory)/s/ASP_Angular/</code>。</p><p>保存并运行。耐心等待一会，任务运行完成后，我们点进任务日志，可以看到如下的日志。</p><p><img alt="Graphical user interface, text Description automatically generated" src="../assets/img/20210612_Azure_DevOps_Pipeline_4_01.png"></p><p>表示前端的构建已经成功完成。</p><h2>前端后端代码合并最终发布制品</h2><p>最后我们把前端构建好的文件复制到后端构建好的目录下，就可以准备好用于发布的制品包了。</p><p>回到YAML文件编辑界面，先找到</p> <pre><code class="language-yaml">- task: DotNetCoreCLI@2
  displayName: 'dotnet publish'
  inputs:
    command: publish
    publishWebProjects: false
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
    zipAfterPublish: true
</code></pre> <p>这段，把最后的 <code>zipAfterPublish: true</code> 改成 <code>zipAfterPublish: false</code>，意思是我们在这步先不压缩了，保持原来的目录和文件。然后在这个任务后面添加一个任务。</p> <pre><code class="language-yaml">- task: CopyFiles@2
  displayName: 'copy frontend files'
  inputs:
    SourceFolder: '$(Agent.BuildDirectory)/s/ASP_Angular/dist'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/ASP_Backend/wwwroot'
</code></pre> <p>这是把前端构建好的文件拷贝到后端构建好的指定目录中。</p><p><code>SourceFolder: '$(Agent.BuildDirectory)/s/ASP_Angular/dist'</code> 表示源路径设置为<code>$(Agent.BuildDirectory)/s/ASP_Angular/dist</code>，因为默认情况下Angular构建生成的文件放在项目的/dist目录下。</p><p><code>TargetFolder: '$(Build.ArtifactStagingDirectory)/ASP_Backend/wwwroot'</code> 表示目标路径是后端构建好的目录下的 wwwroot，这是ASP.Net 项目的惯例，wwwroot下的静态文件会原样输出。</p><p>然后再添加一个任务。</p> <pre><code class="language-yaml">- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/ASP_Backend/'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true
    verbose: true
</code></pre> <p>把前面都整理好的目录和文件统一打包压缩包。</p><p><code>archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'</code> 这行声明打包文件存放的路径，<code>$(Build.BuildId)</code>是个环境变量，是构建的序列号，通常用来给每次构建的打包文件生成不同的名字。</p><p>最后发布制品的任务也从原来的</p> <pre><code class="language-yaml">    PathtoPublish: '$(Build.ArtifactStagingDirectory)/ '
</code></pre> <p>改成</p> <pre><code class="language-yaml">    PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
</code></pre> <p>咱们只要保存这一个最终的压缩包即可，其它过程中的文件不用发布。</p><p>保存之后运行。运行成功后，这次我们可以看到生成的制品文件名变成了这样的。</p><p><img alt="Graphical user interface, application, Teams Description automatically generated" src="../assets/img/20210612_Azure_DevOps_Pipeline_4_02.png"></p><p>因为包含前端和后端所有构建好的文件，所以体积也增大到了4MB。</p><p>我们下载这个文件，可以在自己电脑解压看一下。</p> <pre><code class="language-bash">unzip -l 235.zip
Archive:  235.zip
  Length     Date   Time    Name
 --------    ----   ----    ----
   138528  06-03-21 08:12   ASP_Backend
    10240  06-03-21 08:12   ASP_Backend.Views.dll
    19216  06-03-21 08:12   ASP_Backend.Views.pdb
   106734  06-03-21 08:12   ASP_Backend.deps.json
    11264  06-03-21 08:12   ASP_Backend.dll
    20472  06-03-21 08:12   ASP_Backend.pdb
      292  06-03-21 08:12   ASP_Backend.runtimeconfig.json
    62328  04-23-21 18:32   Microsoft.AspNetCore.SpaServices.Extensions.dll
      162  06-03-21 08:11   appsettings.Development.json
      196  06-03-21 08:11   appsettings.json
      487  06-03-21 08:12   web.config
        0  06-03-21 08:12   wwwroot/
  2530889  06-03-21 08:12   wwwroot/vendor-es5.js.map
     6303  06-03-21 08:12   wwwroot/runtime-es5.js
     6289  06-03-21 08:12   wwwroot/runtime-es2015.js.map
    14659  06-03-21 08:12   wwwroot/main-es2015.js.map
     5430  06-03-21 08:11   wwwroot/favicon.ico
   387821  06-03-21 08:12   wwwroot/polyfills-es5.js.map
     6286  06-03-21 08:12   wwwroot/runtime-es5.js.map
   816259  06-03-21 08:12   wwwroot/polyfills-es5.js
   289746  06-03-21 08:12   wwwroot/polyfills-es2015.js
     6306  06-03-21 08:12   wwwroot/runtime-es2015.js
    16417  06-03-21 08:12   wwwroot/main-es5.js.map
   147637  06-03-21 08:12   wwwroot/styles.css
      819  06-03-21 08:12   wwwroot/index.html
  5198180  06-03-21 08:12   wwwroot/vendor-es5.js
    28439  06-03-21 08:12   wwwroot/main-es2015.js
  4315318  06-03-21 08:12   wwwroot/vendor-es2015.js
   776588  06-03-21 08:12   wwwroot/styles.css.map
   256877  06-03-21 08:12   wwwroot/polyfills-es2015.js.map
  5079925  06-03-21 08:12   wwwroot/vendor-es2015.js.map
    32199  06-03-21 08:12   wwwroot/main-es5.js
 --------                   -------
 20292306                   32 files
</code></pre> <p>确实包含了前后端所有文件，并且按准备部署的目录格式整理好了。</p><p>如果集成流水线的YAML文件编辑还有问题，可以参考后端源码包ASP_Backend.zip中的ASP_Combine.yml这个文件。</p></main><footer class="footer"><div class="container"><div class="footer-content"><div class="footer-section"><h3><i class="fas fa-snowflake"></i> Snowpeak</h3><p>分享AI和云计算技术的最新动态与实践经验，以及其它有趣的话题。</p><div class="social-links"><div class="social-platforms"><a href="https://github.com/xfsnow" target="_blank" class="social-link"><i class="fab fa-github"></i></a><a href="https://snowpeak.blog.csdn.net/" target="_blank" class="social-link"><i class="fas fa-blog"></i></a><a href="https://space.bilibili.com/701839928" target="_blank" class="social-link"><i class="fab fa-bilibili"></i></a><a href="https://www.linkedin.com/in/snowpeak" target="_blank" class="social-link"><i class="fab fa-linkedin"></i></a></div><div class="wechat-section"><div class="wechat-info"><span class="wechat-label">微信公众号</span><span class="wechat-name">技术温暖生活</span></div><img src="/assets/img/techwarm.jpg" alt="技术温暖生活" class="wechat-qr"></div></div></div><div class="footer-section"><h4>快速链接</h4><ul><li><a href="/#articles">文章</a></li><li><a href="/#tools">工具</a></li><li><a href="https://docs.github.com/en/pages" target="_blank">GitHub Pages</a></li></ul></div><div class="footer-section"><h4>技术栈</h4><ul><li>Python</li><li>GitHub Copilot</li><li>Claude Sonnet 4</li><li>HTML/CSS/JS</li><li>响应式设计</li></ul></div></div><div class="footer-bottom"><p>Copyright &copy; 2013-<script>document.write((new Date()).getFullYear());</script> 雪峰博客。运行在 GitHub Pages 上。 <a href="https://beian.miit.gov.cn" target="_blank" class="icp_beian">京ICP备2021007720号</a><a href="http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=11010502052523" target="_blank" class="gongan_beian">京公网安备11010502052523号</a></p></div></div></footer><script src="/zh/index.js"></script><script src="/assets/js/blog.js"></script><script>hljs.highlightAll();</script></body></html>