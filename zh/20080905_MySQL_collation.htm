<!DOCTYPE html><html lang="zh"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1"><title>雪峰博客</title><meta name="description" content="分享AI和云计算技术的最新动态与实践经验，以及其它有趣的话题。"><meta name="keywords" content="AI, GitHub Copilot, Azure云, 云计算, 前端技术, 后端技术, Web开发, 软件工程"><link rel="stylesheet" href="/assets/css/style.css"><link rel="stylesheet" href="https://site-assets.fontawesome.com/releases/v6.7.2/css/all.css"><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/default.min.css"><script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/highlight.min.js"></script></head><body><nav class="navbar"><div class="nav-container"><div class="nav-logo"><h2><i class="fas fa-snowflake"></i> Snowpeak</h2></div><div class="nav-menu"><a href="/" class="nav-link">首页</a><a href="/zh/page_1.htm" class="nav-link">文章</a><a href="/#tools" class="nav-link">工具</a><a href="/zh/about.htm" class="nav-link">关于</a><a href="/en/" class="nav-link lang-switch"><i class="fas fa-globe"></i> English</a></div><div class="nav-toggle" id="mobile-menu"><span class="bar"></span><span class="bar"></span><span class="bar"></span></div></div></nav><header class="article-header"><div class="container"><h1>MySQL 的 collation</h1><div class="article-meta"><span><i class="fas fa-calendar"></i> 发布时间: 2008-09-05 15:01:00</span><span><i class="fas fa-clock"></i> 阅读约需: 4分钟</span><span><i class="fas fa-tag"></i> 分类: AI技术</span></div></div></header><main class="article-container"><p>先转一别人的学习文章做个引子和基础<br><a href="http://logzgh.itpub.net/post/3185/467401">http://logzgh.itpub.net/post/3185/467401</a></p><p>在以前用oracle的时候，很少关于它的collation方法，但是在mysql中，这点不加注意的话，却有可能会出现问题。</p><p>问题是这样的：<br> 一张test的表，字符集采用的latin1。</p><p>select to_id from test where to_id='cn象_王';<br> +---------------+<br> | to_id |<br> +---------------+<br> | cn陶_陶 |<br> | cn象_王 |<br> +---------------+<br> 2 rows in set (0.00 sec)</p><p>取cn象_王的数据,居然把cn陶_陶的数据也取回来了。</p><p>这显然是不允许的。</p><p>查看它们的编码：</p><p>(root@im_offlog1a)[test]&gt; select hex('cn陶_陶');<br> +----------------+<br> | hex('cn陶_陶') |<br> +----------------+<br> | 636ECCD55FCCD5 |<br> +----------------+<br> 1 row in set (0.00 sec)</p><p>(root@im_offlog1a)[test]&gt; select hex('cn象_王');<br> +----------------+<br> | hex('cn象_王') |<br> +----------------+<br> | 636ECFF35FCDF5 |<br> +----------------+<br> 1 row in set (0.00 sec)</p><p>编码的确是不一样的，但是为什么mysql会认为这两条记录是一样的呢？</p><p>一开始我们就把问题定位于collation引起的问题。</p><p>show variables查看<br> | collation_connection | latin1_swedish_ci<br> | collation_database | latin1_swedish_ci<br> | collation_server | latin1_swedish_ci</p><p>手工把这些参数修改为latin1_bin，结果居然一样。这下感觉真是奇怪了。</p><p>这里先解释一下mysql collation的命名规则：<br> 它们以其相关的字符集名开始，通常包括一个语言名，并且以_ci（大小写不敏感）、_cs（大小写敏感）或_bin（二元）结束</p><p>比如latin1字符集有以下几种校正规则：</p><p>校对规则 含义<br> latin1_german1_ci 德国DIN-1<br> latin1_swedish_ci 瑞典/芬兰<br> latin1_danish_ci 丹麦/挪威<br> latin1_german2_ci 德国 DIN-2<br> latin1_bin 符合latin1编码的二进制<br> latin1_general_ci 多种语言(西欧)<br> latin1_general_cs 多种语言(西欧ISO),大小写敏感<br> latin1_spanish_ci 现代西班牙</p><p>最后我们将表格重建，手工指定表格级别的collation为latin1_bin。<br> 这个问题就得到了解决。</p><p>那么问题又来了，为什么我前面手工测试latin1_bin时不生效呢？</p><p>原来MySQL按照下面的方式选择表字符集和 校对规则：<br> 如果指定了CHARACTER SET X和COLLATE Y，那么采用CHARACTER SET X和COLLATE Y。<br> 如果指定了CHARACTER SET X而没有指定COLLATE Y，那么采用CHARACTER SET X和CHARACTER SET X的默认校对规则。<br> 否则，采用服务器字符集和服务器校对规则。</p><p>而我们在建表的时候指定了character set，所以它永远是采用对应的默认的校对规则。</p><p>当然我们其实也没必要重建表格，只需要alter table db_allot CONVERT TO CHARACTER SET latin1 COLLATE latin1_bin这样转换即可。</p><p>另外建议collation都尽量采用字符集相应的bin类型的校对规则，这样不容易出错。</p><p>再说说我自己的体会</p><p>觉得 character set latin1 collate latin1_bin 就是老版的 VARCHAR BINARY 的改进，只是新版的先用 character set 定字符集，再用此字符集名字加 _bin 定校对规则为二进制的，从而确保中文查询正确。<br> 再测试了一下，把此字段属性改为不带 BINARY 的<br> ALTER TABLE <code>comment_content_1_01</code> CHANGE <code>thread</code><code>thread</code> VARCHAR( 50 ) DEFAULT NULL<br> 然后再看表结构确实变成 <code>thread</code> varchar(50) default NULL, 即不带 character set latin1 collate latin1_bin 了，可见character set latin1 collate latin1_bin 就是老版的 VARCHAR BINARY 的改进。</p><p>此外还读到更方便的做法，不用逐个改字段属性，而只要表格级别的collation为latin1_bin就行了。<br> 测试：<br> alter table comment_content_1_01 CONVERT TO CHARACTER SET latin1 COLLATE latin1_bin<br> 后，</p><p>再导出表结构</p><p>CREATE TABLE comment_content_1_01 (<br> content_id int(11) NOT NULL auto_increment,<br> thread varchar(50) collate latin1_bin default NULL,<br> uname varchar(100) collate latin1_bin default NULL,<br> nick varchar(100) collate latin1_bin default NULL,<br> uid int(11) unsigned default NULL,<br> content text collate latin1_bin,<br> post_time datetime default NULL,<br> post_ip int(10) unsigned default NULL,<br><code>status</code> enum('unaudit','normal','deleted') collate latin1_bin NOT NULL default 'unaudit',<br> PRIMARY KEY (content_id)<br> ) ENGINE=MyISAM DEFAULT CHARSET=latin1 COLLATE=latin1_bin;</p><p>即便原来没定各字段的 collate，现在也全都是 collate latin1_bin 了。</p></main><footer class="footer"><div class="container"><div class="footer-content"><div class="footer-section"><h3><i class="fas fa-snowflake"></i> Snowpeak</h3><p>分享AI和云计算技术的最新动态与实践经验，以及其它有趣的话题。</p><div class="social-links"><div class="social-platforms"><a href="https://github.com/xfsnow" target="_blank" class="social-link"><i class="fab fa-github"></i></a><a href="https://snowpeak.blog.csdn.net/" target="_blank" class="social-link"><i class="fas fa-blog"></i></a><a href="https://space.bilibili.com/701839928" target="_blank" class="social-link"><i class="fab fa-bilibili"></i></a><a href="https://www.linkedin.com/in/snowpeak" target="_blank" class="social-link"><i class="fab fa-linkedin"></i></a></div><div class="wechat-section"><div class="wechat-info"><span class="wechat-label">微信公众号</span><span class="wechat-name">技术温暖生活</span></div><img src="/assets/img/techwarm.jpg" alt="技术温暖生活" class="wechat-qr"></div></div></div><div class="footer-section"><h4>快速链接</h4><ul><li><a href="/#articles">文章</a></li><li><a href="/#tools">工具</a></li><li><a href="https://docs.github.com/en/pages" target="_blank">GitHub Pages</a></li></ul></div><div class="footer-section"><h4>技术栈</h4><ul><li>Python</li><li>GitHub Copilot</li><li>Claude Sonnet 4</li><li>HTML/CSS/JS</li><li>响应式设计</li></ul></div></div><div class="footer-bottom"><p>Copyright &copy; 2013-<script>document.write((new Date()).getFullYear());</script> 雪峰博客。运行在 GitHub Pages 上。</p></div></div></footer><script src="/zh/index.js"></script><script src="/assets/js/blog.js"></script><script>hljs.highlightAll();</script></body></html>