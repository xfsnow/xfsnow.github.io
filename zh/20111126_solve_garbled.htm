<!DOCTYPE html><html lang="zh-CN"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1"><title>雪峰-博客</title><meta name="description" content="专注于AI、云计算、GitHub Copilot等前沿技术的分享与探讨"><meta name="keywords" content="AI, GitHub Copilot, Azure云, 云计算, 前端技术, 后端技术, Web开发, 软件工程"><link rel="stylesheet" href="/assets/css/style.css"><link rel="stylesheet" href="https://site-assets.fontawesome.com/releases/v6.7.2/css/all.css"><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/default.min.css"><script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/highlight.min.js"></script></head><body><nav class="navbar"><div class="nav-container"><div class="nav-logo"><h2><i class="fas fa-snowflake"></i> Snowpeak</h2></div><div class="nav-menu"><a href="/" class="nav-link">首页</a><a href="/#articles" class="nav-link">文章</a><a href="/#tools" class="nav-link">演示</a><a href="/zh/about.htm" class="nav-link">关于</a><a href="/en/index.html" class="nav-link lang-switch"><i class="fas fa-globe"></i> English</a></div><div class="nav-toggle" id="mobile-menu"><span class="bar"></span><span class="bar"></span><span class="bar"></span></div></div></nav><header class="article-header"><div class="container"><h1>Ajax中文乱码解决方案</h1><div class="article-meta"><span><i class="fas fa-calendar"></i> 发表: 2011-11-26 22:06:43</span><span><i class="fas fa-clock"></i> 阅读约需: 12分钟</span><span><i class="fas fa-tag"></i> 分类: 综合开发</span></div></div></header><main class="article-container"><h2><a href="/cn/article/detail/solve_garbled_chinese_in_ajax/">Ajax中文乱码解决方案</a></h2><p>分类: <a href="/cn/article/category/comprehensive_development/">综合开发</a> 2011-11-26 22:06:43 阅读(4562)</p><p>主流浏览器中 Ajax 对象请求时都以 UTF-8 编码发送数据，所以当前后端文件都统一用 UTF-8 编码时情况比较经典而单纯。如果确实需要 GB 字符集，则需要适当变通。这里就这两种字符集分别说明解决方案。服务器端文件以 PHP 举例。</p><p>下列方案在 IE 系、FireFox3、Chrome4、Opera10 测试通过。</p><h3>UTF-8 经典方案</h3><p>前后端文件本身统一都用 UTF-8 编码。</p><p>HTML 文件使用声明：</p> <pre><code>&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
</code></pre> <p>JavaScript 文件也要存为 UTF-8 模式，最终确保传递参数始终以 UTF-8 编码的核心是把参数值统一用 encodeURIComponent() 处理。即 SF.HTTP.xhr_utf.js 中的如下这行</p> <pre><code>param = encodeURIComponent(param);
</code></pre> <p>注意此时后台 PHP 程序接收到的请求数据是 UTF-8 编码的，如果需要转成其它字符集的数据可以用 iconv 进一步处理。PHP 程序输出数据也必须是 UTF-8 编码的，加声明：</p> <pre><code>header("text/html;charset=UTF-8");
</code></pre> <p>注意要让 IE 正常接收 UTF8 的数据，必须写大写的"UTF-8"，而不能用小写或其它写法！</p><p>以下是各文件完整的代码：</p><h4>sfxhr_utf.htm</h4> <pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;title&gt;AJAX中文-UTF8版&lt;/title&gt;
&lt;script type="text/javascript" src="SF.HTTP.xhr_utf.js" mce_src="SF.HTTP.xhr_utf.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script type="text/javascript"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre> <h4>SF.HTTP.xhr_utf.js</h4> <pre><code>var SF =
{
    //HTTP 请求相关
    HTTP:
    {
        /**兼容 GB2312 字符集的 Ajax 调用方法
        变通是用 escape，提交的汉字会变成 %u9886%u5730 这样的，后端程序再处理成GB字符集的中文，见 ajax.php 中的 unescape 函数。
        输入参数，JSON 格式对象
        {
        'url': url,     请求的 URL
        'type': method, 提交方式，get 或 post，默认为 get
        'charset':charset,  字符集，默认 utf-8
        'params': 提交的参数，JSON 格式，如{var1:'北京', var2:'test'}
        'success': 响应成功时的处理函数，传入参数是标准 XMLHttpRequest 对象
        'fail': 请求失败时的处理函数，通常是在页面上给出提示，可以为空
        'loading': 等行响应时的加载中函数，通常是在页面上给出提示，可以为空
        }

        */
        xhr:function(json)
        {
            //取输入参数，以及赋默认值
            var
            url=json.url,
            method=json.type || 'get',
            params=json.params || {},
            onComplete=json.success,
            charset=json.charset || 'utf8',
            onFailure=json.fail,
            loading=json.loading;

            var getHTTPObject = function() {
                var xmlhttp = false;
                if (window.XMLHttpRequest) {
                    xmlhttp = new XMLHttpRequest();
                } else if(window.ActiveXObject) {
                    try {
                        xmlhttp = new ActiveXObject("Msxml2.XMLHTTP");
                    } catch (e) {
                        try {
                            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                        } catch (e) {
                            xmlhttp = false;
                        }
                    }
                }
                return xmlhttp;
            };

            if (loading)
            {
                loading();
            }
            var query = '';
            for (var i in params)
            {
                var param = params[i];
                if ('gb2312'==charset)
                {
                    param = escape(param);
                }
                //最终解决 IE 中 GET 方式参数值传递不灵，给 UTF-8 字符集时统一加上 encodeURIComponent
                else
                {
                    param = encodeURIComponent(param);
                }
                query+= i + '='+ param + '&amp;';
            }
            var XHR = getHTTPObject();

            //XHR.setRequestHeader("charset","gb2312");
            XHR.onreadystatechange = function() {
                if (XHR.readyState == 4)    {
                    if (XHR.status == 200 || XHR.status == 304) {
                        if (onComplete)     {
                            onComplete(XHR);
                        }
                    }
                    else
                    {
                        if (onFailure)  {
                            onFailure(XHR)
                        };
                    }
                }
            };
            method = ('get' == method.toLowerCase()) ? 'get':'post';
            if ('post'==method)
            {
                XHR.open(method, url, true);
                XHR.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                XHR.send(query);
            }
            else
            {
                url += '?'+ query + 'random='+Math.random();
                XHR.open(method, url, true);
                XHR.send(null);
            }
        }
    }
};
</code></pre> <h4>ajax_utf.php</h4> <pre><code>&lt;?php
$test = isset($_GET['test']) ? $_GET['test'] : $_POST['test'];
//要让 IE 正常接收 UTF8 的数据，必须使用大写的“UTF-8”，而不能用小写！
header("text/plain;charset=UTF-8");
echo ($test);
</code></pre> <h3>GB2312 变通方案</h3><p>前后端文件本身统一都用ANSI编码。</p><p>HTML 文件使用声明：</p> <pre><code>&lt;meta http-equiv="Content-Type" content="text/html; charset=gb2312" /&gt;
</code></pre> <p>让 Ajax 对象不以默认的 UTF-8 编码发送数据，核心的变通是把参数值统一用 escape() 处理，汉字会变成 %u5317%u4EAC 这样的 Unicode 格式，从而浏览器会把它们当作西文数据，不再像普通汉字那样用 UTF-8 字符集再进行 URI 编码。即 SF.HTTP.xhr_utf.js 中的如下这行</p> <pre><code>param = escape(param);
</code></pre> <p>注意此时后台 PHP 程序接收到的请求数据是未编码的 Unicode 格式，需要转回成 GB2312 字符集的数据，使用PHP 程序中的 unescape() 函数即可。输出数据也必须是GB2312编码的，输出前加上声明：</p> <pre><code>header("Content-type: text/html; charset=gb2312");
</code></pre> <p>SF.HTTP.xhr() 方法使用说明请见方法注释及 HTML 范例。</p><p>不同字符集的范例包中 SF.HTTP.xhr.js 和 SF.HTTP.xhr_utf.js 内容完全相同，只是 SF.HTTP.xhr_utf.js 的文件编码是 UTF-8。建议使用 UTF-8 版时把前后全部文件都统一成 UTF-8 编码的文件，因为 IE 浏览器要求引用的外部文件也必须是UTF-8 编码。</p><p>以下是各文件完整的代码：</p><h4>sfxhr.htm</h4> <pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=gb2312" /&gt;
&lt;title&gt;AJAX中文-GB2312版&lt;/title&gt;
&lt;script type="text/javascript" src="SF.HTTP.xhr.js" mce_src="SF.HTTP.xhr.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script type="text/javascript"&gt;&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre> <h4>SF.HTTP.xhr.js</h4> <pre><code>var SF =
{
    //HTTP 请求相关
    HTTP:
    {
        /**兼容 GB2312 字符集的 Ajax 调用方法
        变通是用 escape，提交的汉字会变成 %u9886%u5730 这样的，后端程序再处理成GB字符集的中文，见 ajax.php 中的 unescape 函数。
        输入参数，JSON 格式对象
        {
        'url': url,     请求的 URL
        'type': method, 提交方式，get 或 post，默认为 get
        'charset':charset,  字符集，默认 utf-8
        'params': 提交的参数，JSON 格式，如{var1:'北京', var2:'test'}
        'success': 响应成功时的处理函数，传入参数是标准 XMLHttpRequest 对象
        'fail': 请求失败时的处理函数，通常是在页面上给出提示，可以为空
        'loading': 等行响应时的加载中函数，通常是在页面上给出提示，可以为空
        }

        */
        xhr:function(json)
        {
            //取输入参数，以及赋默认值
            var
            url=json.url,
            method=json.type || 'get',
            params=json.params || {},
            onComplete=json.success,
            charset=json.charset || 'utf8',
            onFailure=json.fail,
            loading=json.loading;

            var getHTTPObject = function() {
                var xmlhttp = false;
                if (window.XMLHttpRequest) {
                    xmlhttp = new XMLHttpRequest();
                } else if(window.ActiveXObject) {
                    try {
                        xmlhttp = new ActiveXObject("Msxml2.XMLHTTP");
                    } catch (e) {
                        try {
                            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                        } catch (e) {
                            xmlhttp = false;
                        }
                    }
                }
                return xmlhttp;
            };

            if (loading)
            {
                loading();
            }
            var query = '';
            for (var i in params)
            {
                var param = params[i];
                if ('gb2312'==charset)
                {
                    param = escape(param);
                }
                //最终解决 IE 中 GET 方式参数值传递不灵，给 UTF-8 字符集时统一加上 encodeURIComponent
                else
                {
                    param = encodeURIComponent(param);
                }
                query+= i + '='+ param + '&amp;';
            }
            var XHR = getHTTPObject();

            //XHR.setRequestHeader("charset","gb2312");
            XHR.onreadystatechange = function() {
                if (XHR.readyState == 4)    {
                    if (XHR.status == 200 || XHR.status == 304) {
                        if (onComplete)     {
                            onComplete(XHR);
                        }
                    }
                    else
                    {
                        if (onFailure)  {
                            onFailure(XHR)
                        };
                    }
                }
            };
            method = ('get' == method.toLowerCase()) ? 'get':'post';
            if ('post'==method)
            {
                XHR.open(method, url, true);
                XHR.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                XHR.send(query);
            }
            else
            {
                url += '?'+ query + 'random='+Math.random();
                XHR.open(method, url, true);
                XHR.send(null);
            }
        }
    }
};
</code></pre> <h4>ajax.php</h4> <pre><code>&lt;?php
//如果输入参数不是 unicode 格式的值，则会原样返回。
function unescape($str) {
    $str = rawurldecode($str);
    preg_match_all("/(?:%u.{4})|&amp;#x.{4};|&amp;#/d+;|.+/U",$str,$r);
    $ar = $r[0];
    //print_r($ar);
    foreach($ar as $k=&gt;$v) {
        if(substr($v,0,2) == "%u")
        $ar[$k] = iconv("UCS-2","GB2312",pack("H4",substr($v,-4)));
        elseif(substr($v,0,3) == "&amp;#x")
        $ar[$k] = iconv("UCS-2","GB2312",pack("H4",substr($v,3,-1)));
        elseif(substr($v,0,2) == "&amp;#") {
            echo substr($v,2,-1)."&lt;br&gt;";
            $ar[$k] = iconv("UCS-2","GB2312",pack("n",substr($v,2,-1)));
        }
    }
    return join("",$ar);
}

$test = isset($_GET['test']) ? $_GET['test'] : $_POST['test'];
//为确保输出内容为指定字符集，显式声明一下。要输出 GB2312 字符集内容时，
header("Content-type: text/html; charset=gb2312");
echo unescape($test);
</code></pre> <hr><p><em>原文链接: https://www.snowpeak.fun/cn/article/detail/solve_garbled_chinese_in_ajax/</em></p></main><footer class="footer"><div class="container"><div class="footer-content"><div class="footer-section"><h3><i class="fas fa-snowflake"></i> Snowpeak</h3><p>专注于AI与云计算技术的分享平台</p><div class="social-links"><div class="social-platforms"><a href="https://github.com/xfsnow" target="_blank" class="social-link"><i class="fab fa-github"></i></a><a href="https://snowpeak.blog.csdn.net/" target="_blank" class="social-link"><i class="fas fa-blog"></i></a><a href="https://space.bilibili.com/701839928" target="_blank" class="social-link"><i class="fab fa-bilibili"></i></a><a href="https://www.linkedin.com/in/snowpeak" target="_blank" class="social-link"><i class="fab fa-linkedin"></i></a></div><div class="wechat-section"><div class="wechat-info"><span class="wechat-label">微信公众号</span><span class="wechat-name">技术温暖生活</span></div><img src="/assets/img/techwarm.jpg" alt="微信公众号二维码" class="wechat-qr"></div></div></div><div class="footer-section"><h4>快速链接</h4><ul><li><a href="#articles">最新文章</a></li><li><a href="#tools">范例演示</a></li><li><a href="https://docs.github.com/en/pages" target="_blank">GitHub Pages</a></li></ul></div><div class="footer-section"><h4>技术栈</h4><ul><li>Python</li><li>GitHub Copilot</li><li>Claude Sonnet 4</li><li>HTML/CSS/JS</li><li>响应式设计</li></ul></div></div><div class="footer-bottom"><p>Copyright &copy; 2013-<script>document.write((new Date()).getFullYear());</script> 雪峰博客。运行在 GitHub Pages 上。</p></div></div></footer><script src="/zh/index.js"></script><script src="/assets/js/blog.js"></script><script>hljs.highlightAll();</script></body></html>