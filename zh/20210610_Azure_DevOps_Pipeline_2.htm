<!DOCTYPE html><html lang="zh"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1"><title>雪峰博客</title><meta name="description" content="分享AI和云计算技术的最新动态与实践经验，以及其它有趣的话题。"><meta name="keywords" content="AI, GitHub Copilot, Azure云, 云计算, 前端技术, 后端技术, Web开发, 软件工程"><link rel="stylesheet" href="/assets/css/style.min.css"><link rel="stylesheet" href="https://site-assets.fontawesome.com/releases/v6.7.2/css/all.css"><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/default.min.css"><script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/highlight.min.js"></script></head><body><nav class="navbar"><div class="nav-container"><div class="nav-logo"><h2><i class="fas fa-snowflake"></i> Snowpeak</h2></div><div class="nav-menu"><a href="/" class="nav-link">首页</a><a href="/zh/page_1.htm" class="nav-link">文章</a><a href="/#tools" class="nav-link">工具</a><a href="/zh/about.htm" class="nav-link">关于</a><a href="/en/" class="nav-link lang-switch"><i class="fas fa-globe"></i> English</a></div><div class="nav-toggle" id="mobile-menu"><span class="bar"></span><span class="bar"></span><span class="bar"></span></div></div></nav><header class="article-header"><div class="container"><h1>Azure DevOps流水线合并多个源码库（二）</h1><div class="article-meta"><span><i class="fas fa-calendar"></i> 发布时间: 2021-06-10 10:00:00</span><span><i class="fas fa-clock"></i> 阅读约需: 3 分钟 </span><span><i class="fas fa-tag"></i> 分类: 软件工具</span></div></div></header><main class="article-container"><h2>配置CI流水线</h2><p>源和目标准备好了，我们先来配置持续集成的流水线。</p><h3>创建流水线，先构建后端项目</h3><p>在Azure DevOps 控制台点击左侧导航链接Pipelines 下的 Pipelines，右上角点击 New pipeline 按钮。</p><p>跟着向导走，Where is your code 选 Azure Repos Git。</p><p>Select a repository 选前面准备好的ASP_Backend 库。</p><p>Configure your pipeline，点击 Show more按钮，然后点选 ASP.Net Core。点击右上角的Save and run 按钮。弹出的浮层都用默认值，点右下角 Save and run 按钮先执行一下。然后会跳到流水线执行界面。稍等一会，我们会看到执行完成，Job前面有个绿色对勾图标，说明这第一步ASP.Net构建成功了。</p><p><img alt="" src="../assets/img/20210610_Azure_DevOps_Pipeline_2_01.png"></p><p>集成流水线创建成功，也完成了第一个任务。不过到现在为止，什么制品都没有生成和保存。没关系，咱们就是一步一步来详细讲解，带领大家从零开始创建一个流水线。下一步，我们来保存构建生成的制品。</p><h3>保存构建制品</h3><p>我们回到刚刚创建的Pipeline，点击右上角的Edit按钮，可以看到这其实是一个YAML文件。</p><p><img alt="Graphical user interface, text, application, email Description automatically generated" src="../assets/img/20210610_Azure_DevOps_Pipeline_2_02.png"></p><p>其中steps下面就是这个流水线要执行的具体步骤，可以看到现在只有一个步骤，就是使用 dotnet build把当前的后端项目构建一下。下面我们再添加2个步骤。</p> <pre><code class="language-yaml">- task: DotNetCoreCLI@2
  displayName: 'dotnet publish'
  inputs:
    command: publish
    publishWebProjects: false
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  inputs:
PathtoPublish: '$(Build.ArtifactStagingDirectory)/'
</code></pre> <p>新增的2个步骤，前一个是把构建好的制品发布到指定路径，后一个是把发布的制品保存下来。</p><p>点击右上角的Save按钮，然后再点击 Run 按钮，耐心等待一会我们更新后的Pipeline执行完毕。这时再回来看任务执行的结果页，会发现多了一个 1 Published。</p><p><img alt="Graphical user interface, text, application Description automatically generated" src="../assets/img/20210610_Azure_DevOps_Pipeline_2_03.png"></p><p>点击这个1 Published链接，会前进到如下的制品页面。</p><p><img alt="Graphical user interface, application, Teams Description automatically generated" src="../assets/img/20210610_Azure_DevOps_Pipeline_2_04.png"></p><p>s.zip 这个制品文件点击可下载，下载之后打开这个压缩包文件，可以看到里面就是dotnet build构建好的文件。</p> <pre><code class="language-bash">unzip -l s.zip
Archive:  s.zip
  Length     Date   Time    Name
 --------    ----   ----    ----
   138528  06-02-21 09:50   ASP_Backend
    10240  06-02-21 09:50   ASP_Backend.Views.dll
    19136  06-02-21 09:50   ASP_Backend.Views.pdb
   106734  06-02-21 09:50   ASP_Backend.deps.json
    11264  06-02-21 09:50   ASP_Backend.dll
    20392  06-02-21 09:50   ASP_Backend.pdb
      292  06-02-21 09:50   ASP_Backend.runtimeconfig.json
    62328  04-23-21 18:32   Microsoft.AspNetCore.SpaServices.Extensions.dll
      162  06-02-21 09:50   appsettings.Development.json
      196  06-02-21 09:50   appsettings.json
      487  06-02-21 09:50   web.config
        0  06-02-21 09:50   wwwroot/
     5430  06-02-21 09:50   wwwroot/favicon.ico
 --------                   -------
   375189                   13 files
</code></pre> <p>到此，后端构建和制品保存已经完成。下面我们再来看一下前端的构建。在构建前端之前，需要先在当前流水线引入2个源码库。</p></main><footer class="footer"><div class="container"><div class="footer-content"><div class="footer-section"><h3><i class="fas fa-snowflake"></i> Snowpeak</h3><p>分享AI和云计算技术的最新动态与实践经验，以及其它有趣的话题。</p><div class="social-links"><div class="social-platforms"><a href="https://github.com/xfsnow" target="_blank" class="social-link"><i class="fab fa-github"></i></a><a href="https://snowpeak.blog.csdn.net/" target="_blank" class="social-link"><i class="fas fa-blog"></i></a><a href="https://space.bilibili.com/701839928" target="_blank" class="social-link"><i class="fab fa-bilibili"></i></a><a href="https://www.linkedin.com/in/snowpeak" target="_blank" class="social-link"><i class="fab fa-linkedin"></i></a></div><div class="wechat-section"><div class="wechat-info"><span class="wechat-label">微信公众号</span><span class="wechat-name">技术温暖生活</span></div><img src="/assets/img/techwarm.jpg" alt="技术温暖生活" class="wechat-qr"></div></div></div><div class="footer-section"><h4>快速链接</h4><ul><li><a href="/#articles">文章</a></li><li><a href="/#tools">工具</a></li><li><a href="https://docs.github.com/en/pages" target="_blank">GitHub Pages</a></li></ul></div><div class="footer-section"><h4>技术栈</h4><ul><li>Python</li><li>GitHub Copilot</li><li>Claude Sonnet 4</li><li>HTML/CSS/JS</li><li>响应式设计</li></ul></div></div><div class="footer-bottom"><p>Copyright &copy; 2013-<script>document.write((new Date()).getFullYear());</script> 雪峰博客。运行在 GitHub Pages 上。 <a href="https://beian.miit.gov.cn" target="_blank" class="icp_beian">京ICP备2021007720号</a><a href="http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=11010502052523" target="_blank" class="gongan_beian">京公网安备11010502052523号</a></p></div></div></footer><script src="/zh/index.js"></script><script src="/assets/js/blog.min.js"></script><script>hljs.highlightAll();</script></body></html>