<!DOCTYPE html><html lang="zh"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1"><title>雪峰博客</title><meta name="description" content="专注于AI和云计算技术的分享与探讨"><meta name="keywords" content="AI, GitHub Copilot, Azure云, 云计算, 前端技术, 后端技术, Web开发, 软件工程"><link rel="stylesheet" href="/assets/css/style.css"><link rel="stylesheet" href="https://site-assets.fontawesome.com/releases/v6.7.2/css/all.css"><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/default.min.css"><script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/highlight.min.js"></script></head><body><nav class="navbar"><div class="nav-container"><div class="nav-logo"><h2><i class="fas fa-snowflake"></i> Snowpeak</h2></div><div class="nav-menu"><a href="/" class="nav-link">首页</a><a href="/#articles" class="nav-link">文章</a><a href="/#tools" class="nav-link">工具</a><a href="/zh/about.htm" class="nav-link">关于</a><a href="/en/index.html" class="nav-link lang-switch"><i class="fas fa-globe"></i> English</a></div><div class="nav-toggle" id="mobile-menu"><span class="bar"></span><span class="bar"></span><span class="bar"></span></div></div></nav><header class="article-header"><div class="container"><h1>JavaScript 读 URL 参数改进版</h1><div class="article-meta"><span><i class="fas fa-calendar"></i> 发布时间: 2008-10-24 17:41:00</span><span><i class="fas fa-clock"></i> 阅读约需: 3分钟</span><span><i class="fas fa-tag"></i> 分类: AI技术</span></div></div></header><main class="article-container"><p>此前发表的那一版确实能不用循环，但是总用正则表达式的替换，不一定比用循环提高性能，而且把程序搞得有些太复杂了。从《JavaScript权威指南》上学到的范例如下，</p> <pre><code>/* 《JavaScript权威指南》介绍的更简洁的取 URL 参数的方法，不用正则表达式，用一次循环。一次性返回一个对象的好处是只需要调用一次此函数，参数和值对可以存在一个对象里，以后再取其它参数的值就不用再调用此函数了，只要取对象的属性就行了。
 * 用法：
 * var args = getArgs( );  // 从 URL 解析出参数
 * var q = args.q || &quot;&quot;;  // 如果定义了某参数，则使用其值，否则给它一个默认值
 * var n = args.n ? parseInt(args.n) : 10;
 */
var getArgs = function ()
{
    var args = new Object( );  //声明一个空对象
    var query = window.location.search.substring(1);     // 取查询字符串，如从 http://www.snowpeak.org/testjs.htm?a1=v1&amp;a2=&amp;a3=v3#anchor 中截出 a1=v1&amp;a2=&amp;a3=v3。
    var pairs = query.split(&quot;&amp;&quot;);                 // 以 &amp; 符分开成数组
    for(var i = 0; i &lt; pairs.length; i++) {
        var pos = pairs[i].indexOf('=');          // 查找 &quot;name=value&quot; 对
        if (pos == -1) continue;                  // 若不成对，则跳出循环继续下一对
        var argname = pairs[i].substring(0,pos);  // 取参数名
        var value = pairs[i].substring(pos+1);    // 取参数值
        value = decodeURIComponent(value);        // 若需要，则解码
        args[argname] = value;                    // 存成对象的一个属性
    }
    return args;                                  // 返回此对象
}
</code></pre> <p>它的突出优点就是程序只用执行一次提取操作，以后再重复取参数值，都不用再执行程序了。取 URL 参数还是这样比较简便易行，又好理解。下面是我此前发表的“不用循环”但“有些太复杂”的版本：</p> <pre><code>//不用循环纯用正则实现从 URL 中取参数的值。取代循环的核心技术是字符串的 replace() 方法可以用函数作第二参数，按用户定义的方式去替换。
//若有此参数名但无值，则返回空字符串；若无此参数名，返回 undefined。
var getArg = function(argname)
{
 var str = location.href;
 var submatch;
 //先从 URL 中取出问号和井口与之间的查询字符串，如从 http://www.snowpeak.org/testjs.htm?a1=v1&amp;a2=&amp;a3=v3#anchor 中截出 a1=v1&amp;a2=&amp;a3=v3。
 //问号是模式的特殊字符，所以要写成 /?；井号可有可无，所以模式结尾是 #?
 if (submatch = str.match(//?([^#]*)#?/))
 {
  //取到捕捉的子匹配形如 a1=v1&amp;a2=&amp;a3=v3，在前面加个 &amp; 做成规则的 &amp;a1=v1&amp;a2=&amp;a3=v3 便于下一步替换
  var argstr = '&amp;'+submatch[1];
  //做个替换用的函数，把找到的每组形如 &amp;a1=v1 替换成 a1:&quot;v1&quot;, 这样的对象定义用的属性声明
  var returnPattern = function(str)
  {
   //$1 和 $2 代表捕捉到的第1个和第2个子匹配，必须用在字符串里
   return str.replace(/&amp;([^=]+)=([^&amp;]*)/, '$1:&quot;$2&quot;,');
  }
  //执行一个全局的正则替换，第二参数就是刚才定义的替换函数，把 a1=v1&amp;a2=&amp;a3=v3 替换成 a1:&quot;v1&quot;,a2:&quot;&quot;,a3:&quot;v3&quot;,
  argstr = argstr.replace(/&amp;([^=]+)=([^&amp;]*)/g, returnPattern);
  //最后再执行一个对象的声明，需要形如 var retvalue = {a1:&quot;v1&quot;,a2:&quot;&quot;,a3:&quot;v3&quot;}; 的对象声明，而刚才替换完的字符串结尾还有个逗号，把结尾的逗号用 substr 截掉即可
  eval('var retvalue = {'+argstr.substr(0, argstr.length-1)+'};');
  //现在就得到了一个对象，URL 中每个参数名是其属性名，参数值是对应的属性值
  return retvalue[argname];
 }
}

//测试
document.write('a1='+getArg('a1')+', a2='+getArg('a2')+', a3='+getArg('a3'));
</code></pre> </main><footer class="footer"><div class="container"><div class="footer-content"><div class="footer-section"><h3><i class="fas fa-snowflake"></i> Snowpeak</h3><p>专注于AI和云计算技术的分享与探讨</p><div class="social-links"><div class="social-platforms"><a href="https://github.com/xfsnow" target="_blank" class="social-link"><i class="fab fa-github"></i></a><a href="https://snowpeak.blog.csdn.net/" target="_blank" class="social-link"><i class="fas fa-blog"></i></a><a href="https://space.bilibili.com/701839928" target="_blank" class="social-link"><i class="fab fa-bilibili"></i></a><a href="https://www.linkedin.com/in/snowpeak" target="_blank" class="social-link"><i class="fab fa-linkedin"></i></a></div><div class="wechat-section"><div class="wechat-info"><span class="wechat-label">微信公众号</span><span class="wechat-name">技术温暖生活</span></div><img src="/assets/img/techwarm.jpg" alt="技术温暖生活" class="wechat-qr"></div></div></div><div class="footer-section"><h4>快速链接</h4><ul><li><a href="/#articles">文章</a></li><li><a href="/#tools">工具</a></li><li><a href="https://docs.github.com/en/pages" target="_blank">GitHub Pages</a></li></ul></div><div class="footer-section"><h4>技术栈</h4><ul><li>Python</li><li>GitHub Copilot</li><li>Claude Sonnet 4</li><li>HTML/CSS/JS</li><li>响应式设计</li></ul></div></div><div class="footer-bottom"><p>Copyright &copy; 2013-<script>document.write((new Date()).getFullYear());</script> 雪峰博客。运行在 GitHub Pages 上。</p></div></div></footer><script src="/zh/index.js"></script><script src="/assets/js/blog.js"></script><script>hljs.highlightAll();</script></body></html>