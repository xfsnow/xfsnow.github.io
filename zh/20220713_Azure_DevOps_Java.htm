<!DOCTYPE html><html lang="zh"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1"><title>雪峰博客</title><meta name="description" content="专注于AI和云计算技术的分享与探讨"><meta name="keywords" content="AI, GitHub Copilot, Azure云, 云计算, 前端技术, 后端技术, Web开发, 软件工程"><link rel="stylesheet" href="/assets/css/style.css"><link rel="stylesheet" href="https://site-assets.fontawesome.com/releases/v6.7.2/css/all.css"><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/default.min.css"><script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/highlight.min.js"></script></head><body><nav class="navbar"><div class="nav-container"><div class="nav-logo"><h2><i class="fas fa-snowflake"></i> Snowpeak</h2></div><div class="nav-menu"><a href="/" class="nav-link">首页</a><a href="/#articles" class="nav-link">文章</a><a href="/#tools" class="nav-link">工具</a><a href="/zh/about.htm" class="nav-link">关于</a><a href="/en/index.html" class="nav-link lang-switch"><i class="fas fa-globe"></i> English</a></div><div class="nav-toggle" id="mobile-menu"><span class="bar"></span><span class="bar"></span><span class="bar"></span></div></div></nav><header class="article-header"><div class="container"><h1>Azure DevOps部署Java Spring 应用到Azure App Service</h1><div class="article-meta"><span><i class="fas fa-calendar"></i> 发布时间: 2022-07-13 10:57:47</span><span><i class="fas fa-clock"></i> 阅读约需: 4分钟</span><span><i class="fas fa-tag"></i> 分类: AI技术</span></div></div></header><main class="article-container"><p>Azure DevOps是微软Azure云平台上端到端的企业级研发管理平台，其中Azure Pipelines是使用流水线实现CI/CD的核心服务。Azure App Service（应用服务）是一个为开发人员提供的完全托管的平台即服务 (PaaS) 产品，可以快速搭建基于HTTP的 Web应用、API和移动后端。Spring Boot是当前Java应用最主流的开发框架。本文以一个基本的实例，详细讲解使用Azure Pipelines创建和编辑流水线，把Java Spring 应用构建并部署到 Azure App Service上。</p><h2>Java Spring 演示代码</h2><p>源码在这里 <a href="https://github.com/xfsnow/SpringTomcat" title="GitHub - xfsnow/SpringTomcat: A demo project of Spring Boot running in Tomcat deployed to Azure App Service with Azure DevOps.">GitHub - xfsnow/SpringTomcat: A demo project of Spring Boot running in Tomcat deployed to Azure App Service with Azure DevOps.</a>，请 fork 到自己的GitHub里以便后面练习使用。或者以此为参考，直接使用Visual Studio Code中Spring Initializr 创建默认的Maven Project 也行，注意打包模式要选择war包，因为我们要使用外部的Tomcat Server，而不使用Spring Boot内置的Tomcat Server。pom.xml 中有以下配置项需注意：</p> <pre><code class="language-xml">&lt;properties&gt;
    &lt;java.version&gt;11&lt;/java.version&gt;
&lt;/properties&gt;
</code></pre> <p>引用Tomcat Server相关的库，以方便使用javax.servlet系的包。</p> <pre><code class="language-xml">    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;
      &lt;artifactId&gt;tomcat-servlet-api&lt;/artifactId&gt;
      &lt;version&gt;10.0.8&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;
      &lt;artifactId&gt;tomcat-jsp-api&lt;/artifactId&gt;
      &lt;version&gt;10.0.8&lt;/version&gt;
    &lt;/dependency&gt;
</code></pre> <h2>创建Azure App Service实例</h2><p>登录Azure控制台https://portal.azure.com/，找到 App Service服务，点击左上角的 Create创建一个App Service实例。在创建的向导中，Basics页重点几项是Instance Details部分的配置。</p><p>Publish 选Code；</p><p>Runtime Stack 选Java 11；</p><p>Java web server stack 选Apache Tomcat 9.0；</p><p>Operating System 选 Linux；</p><p>Region选择主流的区域即可，此例中选择East Asia。</p><p>App Service Plan 选择免费档的Free F1级别，这样可以充分利用Azure的免费机会，不产生资源费用。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_01.png"></p><p>注意这里选择的Java 11和Tomcat 9.0 都是和演示代码中配置使用的Java及Tomcat 版本适配的，演示代码选择这样的版本则是来自于当前Spring Boot版本5.3.21所要求的依赖。Azure DevOps Pipeline中内置的Maven要求Java 11版本才能构建。最终实现开发、CI和部署环境的运行时版本一致，将来部署到App Service后可以正常运行。否则会报依赖错误以及404等错误。</p><p>其它向导页都保持默认即可，点“Create”按钮创建。</p><p>稍等几分钟，实例资源创建好。来到这个App Service实例的Overview页，点击右边的URL，如https://contoso.azurewebsites.net，可以跳到新窗口打开这个应用。Java应用首次运行还需要等几分钟，直到能看到类似如下的默认首页，即可表示这个App Service已经创建成功。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_02.png"></p><p>下面我们会用Azure DevOps的Pipeline把前面提到的演示应用部署上去替换这个默认首页。</p><h2>配置Azure Pipeline构建和部署Java应用</h2><h3>从Azure控制台跳转到Azure DevOps专用控制台的Pipelines</h3><p>在Azure 控制台最上边的搜索栏输入DevOps，然后点击DevOps Organizations。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_03.png"></p><p>会来到跳转到DevOps专门控制台的过渡页。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_04.png"></p><p>再点击这个My Azure DevOps Organizations链接。前进到选择DevOps组织页。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_05.png"></p><p>我这里有只有一个组织，点击这个组织的链接，就可以最终来到Azure DevOps专用的控制台了。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_06.png"></p><p>再点击第一个项目大方块，进入到项目控制台。最后点击左侧导航链接中蓝色火箭图标，就到了流水线管理的界面。</p><h3>创建Azure Pipeline流水线</h3><p>在Azure Pipelines主界面点击右上角的 New pipeline按钮，新建一个流水线。根据创建流水线向导，在Where is you code选择GitHub。</p><p>如果是首次连接GitHub，会跳转到GitHub登录和授权的页，按提示操作即可。</p><p>然后到Select a repository，选择你前面fork下来的源码库。</p><p>到Configure页，选择Maven package Java project Web App to Linux on Azure。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_07.png"></p><p>这时会弹层，按提示选择Azure的订阅，资源组，以及前面创建出来的App Service资源。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_08.png"></p><p>在下一页 Web App name下拉菜单选择之前创建出的App Service实例。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_09.png"></p><p>App Service中新创建的实例可能不能显示在下拉菜单中，请耐心等待直到其可以显示出来。选择相应实例名后，点击右下角的Validate and configure按钮。稍等几秒，之后会跳转到Review 页面。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_10.png"></p><p>建议点击文件名，重命名成有意义的名字，比如pipelines-Build-Deploy-AppService.yml。</p><p>点击右上角Save and run按钮。在弹出的提示层里，建议Commit message写上有意义的消息，因为默认情况下这个流水线文件会提交到同一个源码库中。最后点击弹层右下角的Save and run按钮，之后会跳转到流水线运行的界面。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_11.png"></p><p>点击Build Stage，还可以前进到正在进行的任务的日志界面。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_12.png"></p><p>构建执行完成后，Deploy stage 在首次部署到 Azure App Service 时需要确认授权。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_13.png"></p><p>点击 View 按钮，在弹出的 Waiting for review 弹层，点击 Permit 授权，弹层再点击 Permit 确认即可。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_14.png"></p><p>授权之后 Deploy stage 会继续执行，直到顺利完成。然后我们可以看到流水线运行页的Summary中显示Related 下有个 1 published。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_15.png"></p><p>点击这个链接，再逐级展开，可以看到构建好的制品名是spring-0.0.1-SNAPSHOT.war。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_16.png"></p><h2>查看Azure App Service部署情况</h2><p>回到Azure控制台https://portal.azure.com/，找到 App Service实例，点击左侧导航中Deployment 下的Deployment Center。可以看到显示如下部署成功的记录。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_17.png"></p><p>再回到Overview页点击右侧的对外提供服务的URL，会发现网站首页报错404了。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_18.png"></p><p>因为我们项目的pom.xml中声明了这个项目的制品文件名是spring-0.0.1-SNAPSHOT.war，前面在流水线完成结果中看到的也是这个名字，所以默认部署在Tomcat Server时会增加一个子路径/spring-0.0.1-SNAPSHOT。咱们在前述App Service的URL后面加上/spring-0.0.1-SNAPSHOT 就可以访问了。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_19.png"></p><h2>配置到App Service站点根目录</h2><p>Tomcat Server中部署到网站根目录，有个简单的小办法，就是把war包名指定为 ROOT.war。我们在Pipelines流水线中加一个重命名的步骤就可以了。在Pipeline列表中点击咱们创建出的流水线，再点击右上角的Edit按钮，编辑一下。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_20.png"></p><p>在编辑界面里找到 - task: CopyFiles@2 这个任务，在这行上面增加。</p> <pre><code class="language-yaml"># 增加一个重命名的步骤，把打包制品文件名统一成 ROOT.war，以便后续部署到 App Service 的根目录。
- bash: |
  echo $(System.DefaultWorkingDirectory)
  mv $(System.DefaultWorkingDirectory)/target/*.war $(System.DefaultWorkingDirectory)/target/ROOT.war
</code></pre> <p>这个任务其实是使用的Pipeline中执行 bash 命令的任务类型，$(System.DefaultWorkingDirectory)是个Pipeline中的环境变量，前面构建的任务会根据我们pom.xml中指定的输出设置构建成 hello.war，我们用 mv 命令把它重命名成 ROOT.war。保存流水线后会自动执行，等待执行完毕。我们再到App Service对外服务的URL，重新刷新一下，应用已经可以从域名根目录访问了。</p><p><img alt="" src="../assets/img/20220713_Azure_DevOps_Java_21.png"></p></main><footer class="footer"><div class="container"><div class="footer-content"><div class="footer-section"><h3><i class="fas fa-snowflake"></i> Snowpeak</h3><p>专注于AI和云计算技术的分享与探讨</p><div class="social-links"><div class="social-platforms"><a href="https://github.com/xfsnow" target="_blank" class="social-link"><i class="fab fa-github"></i></a><a href="https://snowpeak.blog.csdn.net/" target="_blank" class="social-link"><i class="fas fa-blog"></i></a><a href="https://space.bilibili.com/701839928" target="_blank" class="social-link"><i class="fab fa-bilibili"></i></a><a href="https://www.linkedin.com/in/snowpeak" target="_blank" class="social-link"><i class="fab fa-linkedin"></i></a></div><div class="wechat-section"><div class="wechat-info"><span class="wechat-label">微信公众号</span><span class="wechat-name">技术温暖生活</span></div><img src="/assets/img/techwarm.jpg" alt="技术温暖生活" class="wechat-qr"></div></div></div><div class="footer-section"><h4>快速链接</h4><ul><li><a href="/#articles">文章</a></li><li><a href="/#tools">工具</a></li><li><a href="https://docs.github.com/en/pages" target="_blank">GitHub Pages</a></li></ul></div><div class="footer-section"><h4>技术栈</h4><ul><li>Python</li><li>GitHub Copilot</li><li>Claude Sonnet 4</li><li>HTML/CSS/JS</li><li>响应式设计</li></ul></div></div><div class="footer-bottom"><p>Copyright &copy; 2013-<script>document.write((new Date()).getFullYear());</script> 雪峰博客。运行在 GitHub Pages 上。</p></div></div></footer><script src="/zh/index.js"></script><script src="/assets/js/blog.js"></script><script>hljs.highlightAll();</script></body></html>