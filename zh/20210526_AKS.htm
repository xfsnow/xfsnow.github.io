<!DOCTYPE html><html lang="zh"><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1"><title>雪峰博客</title><meta name="description" content="分享AI和云计算技术的最新动态与实践经验，以及其它有趣的话题。"><meta name="keywords" content="AI, GitHub Copilot, Azure云, 云计算, 前端技术, 后端技术, Web开发, 软件工程"><link rel="stylesheet" href="/assets/css/style.min.css"><link rel="stylesheet" href="https://site-assets.fontawesome.com/releases/v6.7.2/css/all.css"><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/default.min.css"><script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/highlight.min.js"></script></head><body><nav class="navbar"><div class="nav-container"><div class="nav-logo"><h2><i class="fas fa-snowflake"></i> Snowpeak</h2></div><div class="nav-menu"><a href="/" class="nav-link">首页</a><a href="/zh/page_1.htm" class="nav-link">文章</a><a href="/#tools" class="nav-link">工具</a><a href="/zh/about.htm" class="nav-link">关于</a><a href="/en/" class="nav-link lang-switch"><i class="fas fa-globe"></i> English</a></div><div class="nav-toggle" id="mobile-menu"><span class="bar"></span><span class="bar"></span><span class="bar"></span></div></div></nav><header class="article-header"><div class="container"><h1>AKS扩展到虚拟节点</h1><div class="article-meta"><span><i class="fas fa-calendar"></i> 发布时间: 2021-05-26 15:36:48</span><span><i class="fas fa-clock"></i> 阅读约需: 10 分钟 </span><span><i class="fas fa-tag"></i> 分类: 软件工具</span></div></div></header><main class="article-container"><p>Azure Kubernetes 服务 (AKS)是微软云Azure上托管的Kubernetes 群集，可以用于快速部署Kubernetes 群集。基础的AKS集群使用平 Pod 自动缩放程序，在 Kubernetes 群集中使用指标服务器来监视 Pod 的资源需求。如果应用程序需要更多资源，则会自动增加 Pod 数以满足需求。如果工作节点资源也不够了，则再基于虚拟机扩展集（VMSS）进行工作节点自动扩展。当扩展工作节点时，背后需要新启动虚拟机了，这时资源扩展的速度相对比较慢。为此，Azure还推出了虚拟节点的功能，可以基于Azure容器实例快速创建pod，不使用虚拟机，所以不用等待，大大提高了集群扩展的效率。</p><p>注意：截止到2020年5月，Azure中国区域仅有东2区发布了容器实例服务，并且尚未支持AKS通过虚拟节点扩展到容器实例。此功能在海外区域多数已经正式发布，具体发布情况请查阅<a href="https://docs.microsoft.com/zh-cn/azure/container-instances/container-instances-region-availability" title="Azure 容器实例在 Azure 区域的资源可用性">Azure 容器实例在 Azure 区域的资源可用性</a>。做下面实验，需要海外Azure的环境，我们使用的是美东区。</p><h2>基本部署</h2><h3>应用</h3><p>演示用的应用源码在这里。</p><p><a href="https://github.com/xfsnow/azure-multi-region-example/blob/master/VirtualNodeScaling/nginx-vn.yaml" title="/">/</a><a href="https://github.com/xfsnow/container/blob/master/VirtualNodeScaling">https://github.com/xfsnow/container/blob/master/VirtualNodeScaling</a><a href="https://github.com/xfsnow/azure-multi-region-example/blob/master/VirtualNodeScaling/nginx-vn.yaml" title="/">/</a></p><p>其中Kubernetes 的 deployment 配置文件nginx-vn.yaml使用经典的 nginx 应用作为演示。除了基本的容器镜像配置以外，这里使用了tolerations和affinity来优化使用VM节点和虚拟节点。</p> <pre><code>tolerations:
  - key: virtual-kubelet.io/provider
value: azure
operator: Equal
effect: NoSchedule
  affinity:
nodeAffinity:
  preferredDuringSchedulingIgnoredDuringExecution:
  - weight: 1
preference:
  matchExpressions:
  - key: type
operator: NotIn
values:
- virtual-kubelet

</code></pre> <p>AKS集群中添加的虚拟节点，默认是tainted，所以我们需要明确指定哪些业务需要通过ACI调度到虚拟节点上。配置文件中的tolerations就是允许pod被调度到虚拟节点上，以便在扩展pod时VM节点资源不够的时候可以创建到虚拟节点上去。</p><p>nodeAffinity指定的是新建pod时偏好，而运行时忽略。偏好的是节点的labels中，type不带virtual-kubelet值的，即新建pod时优先放置在VM的节点上，而收缩时优先删除在虚拟节点上的pod。</p><h3>Azure资源</h3><p>使用控制台创建一个启用虚拟节点的AKS集群。</p><p><img alt="" src="../assets/img/20210526_AKS_01.png"></p><p>区域选择美东，节点数填写1。点击Next: Node pools 按钮。</p><p><img alt="" src="../assets/img/20210526_AKS_02.png"></p><p>勾选Enable virtual nodes，这是启用虚拟节点的关键设置。</p><p>到Networking页，发现只能选用Azure CNI，不再支持Kubenet了。还需要我们指定Cluster subnet和Virtual nodes subnet，这些都使用默认值就行。</p><p>其余配置页都使用默认值，点击Review + Create创建集群。</p><p>创建好后，我们先看 Workloads</p><p><img alt="" src="../assets/img/20210526_AKS_03.png"></p><p>这里这个aci-connector-linux就是用来连接ACI的pod。</p><p>如果刚创建完AKS集群后，这个pod显示不是Ready，请耐心等待一会，可能需要20-30分钟就变成Ready了。</p><p>再看VMSS。</p><p><img alt="" src="../assets/img/20210526_AKS_04.png"></p><p>可以看到里面有1台VM，正常运行。</p><p>点击Virtual network/subnet链接，可以跳转到VM所在的子网。</p><p><img alt="" src="../assets/img/20210526_AKS_05.png"></p><p>在这里左边导航链接点击 Subnets，可以看到AKS平台帮我们自动创建了2个子网。</p><p><img alt="" src="../assets/img/20210526_AKS_06.png"></p><p>其中 default 是VM节点所在的子网，而另一个virtual-node-aci 是为将来扩展虚拟节点所用的子网。</p><h3>部署Kubernetes</h3><p>先连接Kubernetes集群</p><p><img alt="" src="../assets/img/20210526_AKS_07.png"></p><p>然后看一下现有的节点。</p> <pre><code>kubectl get node
NAME                                STATUS   ROLES   AGE     VERSION
aks-agentpool-34658330-vmss000000   Ready    agent   10m     v1.19.9
virtual-node-aci-linux              Ready    agent   9m35s   v1.18.4-vk-azure-aci-v1.3.5
</code></pre> <p>可以看到aks-agentpool-34658330-vmss000000是一个普通的基于虚拟机的节点，还有一个virtual-node-aci-linux就是虚拟节点。</p><p>我们创建一个命名空间，后面的实验都在这个命名空间里进行。</p> <pre><code>kubectl create namespace virtualnode
namespace/virtualnode created
</code></pre> <p>先来做一个是基础的，把pod部署到虚拟节点上。</p> <pre><code>kubectl apply -f helloworld-vn.yaml
deployment.apps/helloworld-vn created
</code></pre> <p>看一下pod</p> <pre><code>kubectl get pods -o wide -n virtualnode
NAME                             READY   STATUS     RESTARTS   AGE   IP       NODE                     NOMINATED NODE   READINESS GATES
helloworld-vn-5749f58859-67vn6   0/1     Creating   0          21s   &lt;none&gt;   virtual-node-aci-linux   &lt;none&gt;           &lt;none&gt;
</code></pre> <p>可以看到正在虚拟节点上部署。</p><p>再看详情：</p> <pre><code>kubectl describe pod helloworld-vn-5749f58859-67vn6 -n  virtualnode
Name:         helloworld-vn-5749f58859-67vn6
Namespace:    virtualnode
Priority:     0
Node:         virtual-node-aci-linux/
Start Time:   Tue, 11 May 2021 11:28:36 +0800
Labels:       app=helloworld-vn
  pod-template-hash=5749f58859
Annotations:  &lt;none&gt;
Status:       Running
IP:           10.241.0.4
IPs:
  IP:           10.241.0.4
Controlled By:  ReplicaSet/helloworld-vn-5749f58859
Containers:
  helloworld-vn:
Container ID:   aci://6ee343c40cb742b912ce86084cb73c5d0f9997dd55fa0b44290bb0c9b04370a4
Image:          mcr.microsoft.com/azuredocs/aci-helloworld
Image ID:
Port:           80/TCP
Host Port:      0/TCP
State:          Running
  Started:      Tue, 11 May 2021 11:28:36 +0800
Ready:          True
Restart Count:  0
Environment:    &lt;none&gt;
Mounts:
  /var/run/secrets/kubernetes.io/serviceaccount from default-token-rzbnb (ro)
Conditions:
  Type           Status
  Ready          True
  Initialized    True
  PodScheduled   True
Volumes:
  default-token-rzbnb:
Type:        Secret (a volume populated by a Secret)
SecretName:  default-token-rzbnb
Optional:    false
QoS Class:       BestEffort
Node-Selectors:  beta.kubernetes.io/os=linux
 kubernetes.io/role=agent
 type=virtual-kubelet
Tolerations:     node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
 node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
 virtual-kubelet.io/provider op=Exists
Events:
  Type    Reason                 Age   From                                   Message
  ----    ------                 ----  ----                                   -------
  Normal  Scheduled              82s                                          Successfully assigned virtualnode/helloworld-vn-5749f58859-67vn6 to virtual-n
ode-aci-linux
  Normal  ProviderCreateSuccess  81s   virtual-node-aci-linux/pod-controller  Create pod in provider successfully
</code></pre> <p>首次部署虚拟节点使用了82秒，感觉稍微有点慢，这里时间主要用在2方面，一是初次创建ACI实例，更多的时间是用在拉取 mcr.microsoft.com/azuredocs/aci-helloworld 这个镜像文件和部署。</p><p>点击查看容器实例</p><p><img alt="" src="../assets/img/20210526_AKS_08.png"></p><p>可以看到有1个容器实例了。</p><p>最后我们把这个deployment删除，清理资源。</p> <pre><code>kubectl delete -f helloworld-vn.yaml        
deployment.apps &quot;helloworld-vn&quot; deleted
</code></pre> <p>伸缩测试</p><p>基于VM的节点和虚拟节点的混合伸缩。</p> <pre><code>kubectl apply -f nginx-vn.yaml
deployment.apps/nginx-vn created
</code></pre> <p>只部署1个pod时，优先部署在了虚拟机的节点上。</p> <pre><code>kubectl get pod -o wide --namespace virtualnode
NAME                        READY   STATUS    RESTARTS   AGE   IP            NODE                                NOMINATED NODE   READINESS GATES
nginx-vn-54d69f7df4-hxkkz   1/1     Running   0          23s   10.240.0.75   aks-agentpool-34658330-vmss000000   &lt;none&gt;           &lt;none&gt;
</code></pre> <p>先扩展到20个副本。</p> <pre><code>kubectl scale deployment nginx-vn --replicas=20 -n virtualnode
deployment.apps/nginx-vn scaled
</code></pre> <p>查看pod。</p> <pre><code>kubectl get pod -o wide --namespace virtualnode
NAME                        READY   STATUS    RESTARTS   AGE     IP             NODE                                NOMINATED NODE   READINESS GATES
nginx-vn-54d69f7df4-4fr5g   1/1     Running   0          3m2s    10.241.0.19    virtual-node-aci-linux              &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-cg4jb   1/1     Running   0          3m2s    10.241.0.5     virtual-node-aci-linux              &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-cmj6d   1/1     Running   0          3m2s    10.241.0.7     virtual-node-aci-linux              &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-dljkw   1/1     Running   0          3m2s    10.241.0.16    virtual-node-aci-linux              &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-f25fb   1/1     Running   0          3m2s    10.241.0.8     virtual-node-aci-linux              &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-g6ps9   1/1     Running   0          3m2s    10.241.0.15    virtual-node-aci-linux              &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-h2dtq   1/1     Running   0          3m2s    10.240.0.82    aks-agentpool-34658330-vmss000000   &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-hgkzc   1/1     Running   0          3m2s    10.241.0.14    virtual-node-aci-linux              &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-hxkkz   1/1     Running   0          7m53s   10.240.0.75    aks-agentpool-34658330-vmss000000   &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-jf4h7   1/1     Running   0          3m2s    10.241.0.20    virtual-node-aci-linux              &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-mtjbn   1/1     Running   0          3m2s    10.241.0.9     virtual-node-aci-linux              &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-q9d5f   1/1     Running   0          3m2s    10.241.0.13    virtual-node-aci-linux              &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-qlf4l   1/1     Running   0          3m2s    10.241.0.18    virtual-node-aci-linux              &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-sb54f   1/1     Running   0          6m27s   10.241.0.4     virtual-node-aci-linux              &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-t4zmf   1/1     Running   0          3m2s    10.241.0.12    virtual-node-aci-linux              &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-xj95k   1/1     Running   0          3m2s    10.241.0.10    virtual-node-aci-linux              &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-xltlt   1/1     Running   0          3m2s    10.241.0.17    virtual-node-aci-linux              &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-xnhtc   1/1     Running   0          3m2s    10.240.0.109   aks-agentpool-34658330-vmss000000   &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-zbzt5   1/1     Running   0          3m2s    10.241.0.6     virtual-node-aci-linux              &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-zphhk   1/1     Running   0          3m2s    10.241.0.11    virtual-node-aci-linux              &lt;none&gt;           &lt;none&gt;
</code></pre> <p>再收缩回2个副本。</p> <pre><code>kubectl scale deployment nginx-vn --replicas=2 -n virtualnode
deployment.apps/nginx-vn scaled
</code></pre> <p>可以看到收缩后，只留下虚拟机节点上的 pod了。</p> <pre><code>kubectl get pod -o wide --namespace virtualnode
NAME                        READY   STATUS    RESTARTS   AGE     IP            NODE                                NOMINATED NODE   READINESS GATES
nginx-vn-54d69f7df4-h2dtq   1/1     Running   0          5m18s   10.240.0.82   aks-agentpool-34658330-vmss000000   &lt;none&gt;           &lt;none&gt;
nginx-vn-54d69f7df4-hxkkz   1/1     Running   0          10m     10.240.0.75   aks-agentpool-34658330-vmss000000   &lt;none&gt;           &lt;none&gt;
</code></pre> <h3>总结</h3><p>通过ACI扩展到虚拟节点，确实比基于VMSS先扩虚机再扩pod 要快不少。但是扩展出的虚拟节点数量也是有限制的，做不到在短时间内无限的扩展出来。建议做法是，以AKS的自动扩展为基础，结合虚拟节点的快速扩展来支持突增的场景，用虚拟节点来先顶住突增的需求，给AKS扩展争取到时间，2种同时扩展，等VMSS扩起来以后，就可以把虚拟节点替换下了。而且 VMSS 的扩展，理论上可以提供更大规模的资源，能够提供比仅用虚拟节点更多的资源。这样做就兼顾了性能的成本。</p></main><footer class="footer"><div class="container"><div class="footer-content"><div class="footer-section"><h3><i class="fas fa-snowflake"></i> Snowpeak</h3><p>分享AI和云计算技术的最新动态与实践经验，以及其它有趣的话题。</p><div class="social-links"><div class="social-platforms"><a href="https://github.com/xfsnow" target="_blank" class="social-link"><i class="fab fa-github"></i></a><a href="https://snowpeak.blog.csdn.net/" target="_blank" class="social-link"><i class="fas fa-blog"></i></a><a href="https://space.bilibili.com/701839928" target="_blank" class="social-link"><i class="fab fa-bilibili"></i></a><a href="https://www.linkedin.com/in/snowpeak" target="_blank" class="social-link"><i class="fab fa-linkedin"></i></a></div><div class="wechat-section"><div class="wechat-info"><span class="wechat-label">微信公众号</span><span class="wechat-name">技术温暖生活</span></div><img src="/assets/img/techwarm.jpg" alt="技术温暖生活" class="wechat-qr"></div></div></div><div class="footer-section"><h4>快速链接</h4><ul><li><a href="/#articles">文章</a></li><li><a href="/#tools">工具</a></li><li><a href="https://docs.github.com/en/pages" target="_blank">GitHub Pages</a></li></ul></div><div class="footer-section"><h4>技术栈</h4><ul><li>Python</li><li>GitHub Copilot</li><li>Claude Sonnet 4</li><li>HTML/CSS/JS</li><li>响应式设计</li></ul></div></div><div class="footer-bottom"><p>Copyright &copy; 2013-<script>document.write((new Date()).getFullYear());</script> 雪峰博客。运行在 GitHub Pages 上。 <a href="https://beian.miit.gov.cn" target="_blank" class="icp_beian">京ICP备2021007720号</a><a href="http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=11010502052523" target="_blank" class="gongan_beian">京公网安备11010502052523号</a></p></div></div></footer><script src="/zh/index.js"></script><script src="/assets/js/blog.min.js"></script><script>hljs.highlightAll();</script></body></html>